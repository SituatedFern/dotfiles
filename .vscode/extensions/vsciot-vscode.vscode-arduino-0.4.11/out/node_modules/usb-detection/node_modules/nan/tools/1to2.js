#!/usr/bin/env node
/*********************************************************************
 * NAN - Native Abstractions for Node.js
 *
 * Copyright (c) 2018 NAN contributors
 *
 * MIT License <https://github.com/nodejs/nan/blob/master/LICENSE.md>
 ********************************************************************/

var commander = require('commander'),
    fs = require('fs'),
    glob = require('glob'),
    groups = [],
    total = 0,
    warning1 = '/* ERROR: Rewrite using Buffer */\n',
    warning2 = '\\/\\* ERROR\\: Rewrite using Buffer \\*\\/\\n',
    length,
    i;

fs.readFile(__dirname + '/package.json', 'utf8', function (err, data) {
  if (err) {
    throw err;
  }

  commander
      .version(JSON.parse(data).version)
      .usage('[options] <file ...>')
      .parse(process.argv);

  if (!process.argv.slice(2).length) {
    commander.outputHelp();
  }
});

/* construct strings representing regular expressions
   each expression contains a unique group allowing for identification of the match
   the index of this key group, relative to the regular expression in question,
    is indicated by the first array member */

/* simple substistutions, key group is the entire match, 0 */
groups.push([0, [
  '_NAN_',
  'NODE_SET_METHOD',
  'NODE_SET_PROTOTYPE_METHOD',
  'NanAsciiString',
  'NanEscapeScope',
  'NanReturnValue',
  'NanUcs2String'].join('|')]);

/* substitutions of parameterless macros, key group is 1 */
groups.push([1, ['(', [
  'NanEscapableScope',
  'NanReturnNull',
  'NanReturnUndefined',
  'NanScope'].join('|'), ')\\(\\)'].join('')]);

/* replace TryCatch with NanTryCatch once, gobbling possible namespace, key group 2 */
groups.push([2, '(?:(?:v8\\:\\:)?|(Nan)?)(TryCatch)']);

/* NanNew("string") will likely not fail a ToLocalChecked(), key group 1 */ 
groups.push([1, ['(NanNew)', '(\\("[^\\"]*"[^\\)]*\\))(?!\\.ToLocalChecked\\(\\))'].join('')]);

/* Removed v8 APIs, warn that the code needs rewriting using node::Buffer, key group 2 */
groups.push([2, ['(', warning2, ')?', '^.*?(', [
      'GetIndexedPropertiesExternalArrayDataLength',
      'GetIndexedPropertiesExternalArrayData',
      'GetIndexedPropertiesExternalArrayDataType',
      'GetIndexedPropertiesPixelData',
      'GetIndexedPropertiesPixelDataLength',
      'HasIndexedPropertiesInExternalArrayData',
      'HasIndexedPropertiesInPixelData',
      'SetIndexedPropertiesToExternalArrayData',
      'SetIndexedPropertiesToPixelData'].join('|'), ')'].join('')]);

/* No need for NanScope in V8-exposed methods, key group 2 */
groups.push([2, ['((', [
      'NAN_METHOD',
      'NAN_GETTER',
      'NAN_SETTER',
      'NAN_PROPERTY_GETTER',
      'NAN_PROPERTY_SETTER',
      'NAN_PROPERTY_ENUMERATOR',
      'NAN_PROPERTY_DELETER',
      'NAN_PROPERTY_QUERY',
      'NAN_INDEX_GETTER',
      'NAN_INDEX_SETTER',
      'NAN_INDEX_ENUMERATOR',
      'NAN_INDEX_DELETER',
      'NAN_INDEX_QUERY'].join('|'), ')\\([^\\)]*\\)\\s*\\{)\\s*NanScope\\(\\)\\s*;'].join('')]);

/* v8::Value::ToXXXXXXX returns v8::MaybeLocal<T>, key group 3 */
groups.push([3, ['([\\s\\(\\)])([^\\s\\(\\)]+)->(', [
      'Boolean',
      'Number',
      'String',
      'Object',
      'Integer',
      'Uint32',
      'Int32'].join('|'), ')\\('].join('')]);

/* v8::Value::XXXXXXXValue returns v8::Maybe<T>, key group 3 */
groups.push([3, ['([\\s\\(\\)])([^\\s\\(\\)]+)->((?:', [
      'Boolean',
      'Number',
      'Integer',
      'Uint32',
      'Int32'].join('|'), ')Value)\\('].join('')]);

/* NAN_WEAK_CALLBACK macro was removed, write out callback definition, key group 1 */
groups.push([1, '(NAN_WEAK_CALLBACK)\\(([^\\s\\)]+)\\)']);

/* node::ObjectWrap and v8::Persistent have been replaced with Nan implementations, key group 1 */
groups.push([1, ['(', [
  'NanDisposePersistent',
  'NanObjectWrapHandle'].join('|'), ')\\s*\\(\\s*([^\\s\\)]+)'].join('')]);

/* Since NanPersistent there is no need for NanMakeWeakPersistent, key group 1 */
groups.push([1, '(NanMakeWeakPersistent)\\s*\\(\\s*([^\\s,]+)\\s*,\\s*']);

/* Many methods of v8::Object and others now return v8::MaybeLocal<T>, key group 3 */
groups.push([3, ['([\\s])([^\\s]+)->(', [
  'GetEndColumn',
  'GetFunction',
  'GetLineNumber',
  'NewInstance',
  'GetPropertyNames',
  'GetOwnPropertyNames',
  'GetSourceLine',
  'GetStartColumn',
  'ObjectProtoToString',
  'ToArrayIndex',
  'ToDetailString',
  'CallAsConstructor',
  'CallAsFunction',
  'CloneElementAt',
  'Delete',
  'ForceSet',
  'Get',
  'GetPropertyAttributes',
  'GetRealNamedProperty',
  'GetRealNamedPropertyInPrototypeChain',
  'Has',
  'HasOwnProperty',
  'HasRealIndexedProperty',
  'HasRealNamedCallbackProperty',
  'HasRealNamedProperty',
  'Set',
  'SetAccessor',
  'SetIndexedPropertyHandler',
  'SetNamedPropertyHandler',
  'SetPrototype'].join('|'), ')\\('].join('')]);

/* You should get an error if any of these fail anyways,
   or handle the error better, it is indicated either way, key group 2 */
groups.push([2, ['NanNew(<(?:v8\\:\\:)?(', ['Date', 'String', 'RegExp'].join('|'), ')>)(\\([^\\)]*\\))(?!\\.ToLocalChecked\\(\\))'].join('')]);

/* v8::Value::Equals now returns a v8::Maybe, key group 3 */
groups.push([3, '([\\s\\(\\)])([^\\s\\(\\)]+)->(Equals)\\(([^\\s\\)]+)']);

/* NanPersistent makes this unnecessary, key group 1 */
groups.push([1, '(NanAssignPersistent)(?:<v8\\:\\:[^>]+>)?\\(([^,]+),\\s*']);

/* args has been renamed to info, key group 2 */
groups.push([2, '(\\W)(args)(\\W)'])

/* node::ObjectWrap was replaced with NanObjectWrap, key group 2 */
groups.push([2, '(\\W)(?:node\\:\\:)?(ObjectWrap)(\\W)']);

/* v8::Persistent was replaced with NanPersistent, key group 2 */
groups.push([2, '(\\W)(?:v8\\:\\:)?(Persistent)(\\W)']);

/* counts the number of capturing groups in a well-formed regular expression,
   ignoring non-capturing groups and escaped parentheses */
function groupcount(s) {
  var positive = s.match(/\((?!\?)/g),
      negative = s.match(/\\\(/g);
  return (positive ? positive.length : 0) - (negative ? negative.length : 0);
}

/* compute the absolute position of each key group in the joined master RegExp */
for (i = 1, length = groups.length; i < length; i++) {
	total += groupcount(groups[i - 1][1]);
	groups[i][0] += total;
}

/* create the master RegExp, whis is the union of all the groups' expressions */
master = new RegExp(groups.map(function (a) { return a[1]; }).join('|'), 'gm');

/* replacement function for String.replace, receives 21 arguments */
function replace() {
	/* simple expressions */
      switch (arguments[groups[0][0]]) {
        case '_NAN_':
          return 'NAN_';
        case 'NODE_SET_METHOD':
          return 'NanSetMethod';
        case 'NODE_SET_PROTOTYPE_METHOD':
          return 'NanSetPrototypeMethod';
        case 'NanAsciiString':
          return 'NanUtf8String';
        case 'NanEscapeScope':
          return 'scope.Escape';
        case 'NanReturnNull':
          return 'info.GetReturnValue().SetNull';
        case 'NanReturnValue':
          return 'info.GetReturnValue().Set';
        case 'NanUcs2String':
          return 'v8::String::Value';
        default:
      }

      /* macros without arguments */
      switch (arguments[groups[1][0]]) {
        case 'NanEscapableScope':
          return 'NanEscapableScope scope'
        case 'NanReturnUndefined':
          return 'return';
        case 'NanScope':
          return 'NanScope scope';
        default:
      }

      /* TryCatch, emulate negative backref */
      if (arguments[groups[2][0]] === 'TryCatch') {
        return arguments[groups[2][0] - 1] ? arguments[0] : 'NanTryCatch';
      }

      /* NanNew("foo") --> NanNew("foo").ToLocalChecked() */
      if (arguments[groups[3][0]] === 'NanNew') {
        return [arguments[0], '.ToLocalChecked()'].join('');
      }

      /* insert warning for removed functions as comment on new line above */
      switch (arguments[groups[4][0]]) {
        case 'GetIndexedPropertiesExternalArrayData':
        case 'GetIndexedPropertiesExternalArrayDataLength':
        case 'GetIndexedPropertiesExternalArrayDataType':
        case 'GetIndexedPropertiesPixelData':
        case 'GetIndexedPropertiesPixelDataLength':
        case 'HasIndexedPropertiesInExternalArrayData':
        case 'HasIndexedPropertiesInPixelData':
        case 'SetIndexedPropertiesToExternalArrayData':
        case 'SetIndexedPropertiesToPixelData':
          return arguments[groups[4][0] - 1] ? arguments[0] : [warning1, arguments[0]].join('');
        default:
      }

     /* remove unnecessary NanScope() */
      switch (arguments[groups[5][0]]) {
        case 'NAN_GETTER':
        case 'NAN_METHOD':
        case 'NAN_SETTER':
        case 'NAN_INDEX_DELETER':
        case 'NAN_INDEX_ENUMERATOR':
        case 'NAN_INDEX_GETTER':
        case 'NAN_INDEX_QUERY':
        case 'NAN_INDEX_SETTER':
        case 'NAN_PROPERTY_DELETER':
        case 'NAN_PROPERTY_ENUMERATOR':
        case 'NAN_PROPERTY_GETTER':
        case 'NAN_PROPERTY_QUERY':
        case 'NAN_PROPERTY_SETTER':
          return arguments[groups[5][0] - 1];
        default:
      }

      /* Value conversion */
      switch (arguments[groups[6][0]]) {
        case 'Boolean':
        case 'Int32':
        case 'Integer':
        case 'Number':
        case 'Object':
        case 'String':
        case 'Uint32':
          return [arguments[groups[6][0] - 2], 'NanTo<v8::', arguments[groups[6][0]], '>(',  arguments[groups[6][0] - 1]].join('');
        default:
      }

      /* other value conversion */
      switch (arguments[groups[7][0]]) {
        case 'BooleanValue':
          return [arguments[groups[7][0] - 2], 'NanTo<bool>(', arguments[groups[7][0] - 1]].join('');
        case 'Int32Value':
          return [arguments[groups[7][0] - 2], 'NanTo<int32_t>(', arguments[groups[7][0] - 1]].join('');
        case 'IntegerValue':
          return [arguments[groups[7][0] - 2], 'NanTo<int64_t>(', arguments[groups[7][0] - 1]].join('');
        case 'Uint32Value':
          return [arguments[groups[7][0] - 2], 'NanTo<uint32_t>(', arguments[groups[7][0] - 1]].join('');
        default:
      }

      /* NAN_WEAK_CALLBACK */
      if (arguments[groups[8][0]] === 'NAN_WEAK_CALLBACK') {
        return ['template<typename T>\nvoid ',
          arguments[groups[8][0] + 1], '(const NanWeakCallbackInfo<T> &data)'].join('');
      }

      /* use methods on NAN classes instead */
      switch (arguments[groups[9][0]]) {
        case 'NanDisposePersistent':
          return [arguments[groups[9][0] + 1], '.Reset('].join('');
        case 'NanObjectWrapHandle':
          return [arguments[groups[9][0] + 1], '->handle('].join('');
        default:
      }

      /* use method on NanPersistent instead */
      if (arguments[groups[10][0]] === 'NanMakeWeakPersistent') {
        return arguments[groups[10][0] + 1] + '.SetWeak(';
      }

      /* These return Maybes, the upper ones take no arguments */
      switch (arguments[groups[11][0]]) {
        case 'GetEndColumn':
        case 'GetFunction':
        case 'GetLineNumber':
        case 'GetOwnPropertyNames':
        case 'GetPropertyNames':
        case 'GetSourceLine':
        case 'GetStartColumn':
        case 'NewInstance':
        case 'ObjectProtoToString':
        case 'ToArrayIndex':
        case 'ToDetailString':
          return [arguments[groups[11][0] - 2], 'Nan', arguments[groups[11][0]], '(', arguments[groups[11][0] - 1]].join('');
        case 'CallAsConstructor':
        case 'CallAsFunction':
        case 'CloneElementAt':
        case 'Delete':
        case 'ForceSet':
        case 'Get':
        case 'GetPropertyAttributes':
        case 'GetRealNamedProperty':
        case 'GetRealNamedPropertyInPrototypeChain':
        case 'Has':
        case 'HasOwnProperty':
        case 'HasRealIndexedProperty':
        case 'HasRealNamedCallbackProperty':
        case 'HasRealNamedProperty':
        case 'Set':
        case 'SetAccessor':
        case 'SetIndexedPropertyHandler':
        case 'SetNamedPropertyHandler':
        case 'SetPrototype':
          return [arguments[groups[11][0] - 2], 'Nan', arguments[groups[11][0]], '(', arguments[groups[11][0] - 1], ', '].join('');
        default:
      }

      /* Automatic ToLocalChecked(), take it or leave it */
      switch (arguments[groups[12][0]]) {
        case 'Date':
        case 'String':
        case 'RegExp':
          return ['NanNew', arguments[groups[12][0] - 1], arguments[groups[12][0] + 1], '.ToLocalChecked()'].join('');
        default:
      }

      /* NanEquals is now required for uniformity */
      if (arguments[groups[13][0]] === 'Equals') {
        return [arguments[groups[13][0] - 1], 'NanEquals(', arguments[groups[13][0] - 1], ', ', arguments[groups[13][0] + 1]].join('');
      }

      /* use method on replacement class instead */
      if (arguments[groups[14][0]] === 'NanAssignPersistent') {
        return [arguments[groups[14][0] + 1], '.Reset('].join('');
      }

      /* args --> info */
      if (arguments[groups[15][0]] === 'args') {
        return [arguments[groups[15][0] - 1], 'info', arguments[groups[15][0] + 1]].join('');
      }

      /* ObjectWrap --> NanObjectWrap */
      if (arguments[groups[16][0]] === 'ObjectWrap') {
        return [arguments[groups[16][0] - 1], 'NanObjectWrap', arguments[groups[16][0] + 1]].join('');
      }

      /* Persistent --> NanPersistent */
      if (arguments[groups[17][0]] === 'Persistent') {
        return [arguments[groups[17][0] - 1], 'NanPersistent', arguments[groups[17][0] + 1]].join('');
      }

      /* This should not happen. A switch is probably missing a case if it does. */
      throw 'Unhandled match: ' + arguments[0];
}

/* reads a file, runs replacement and writes it back */
function processFile(file) {
  fs.readFile(file, {encoding: 'utf8'}, function (err, data) {
    if (err) {
      throw err;
    }

    /* run replacement twice, might need more runs */
    fs.writeFile(file, data.replace(master, replace).replace(master, replace), function (err) {
      if (err) {
        throw err;
      }
    });
  });
}

/* process file names from command line and process the identified files */
for (i = 2, length = process.argv.length; i < length; i++) {
  glob(process.argv[i], function (err, matches) {
    if (err) {
      throw err;
    }
    matches.forEach(processFile);
  });
}

// SIG // Begin signature block
// SIG // MIInzQYJKoZIhvcNAQcCoIInvjCCJ7oCAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // o6efxmXR+rltpJs7y3esQFUJ482plr/LlAJM0ij9O7eg
// SIG // gg2WMIIGFDCCA/ygAwIBAgITMwAAAkNVsbk2MwXnzgAA
// SIG // AAACQzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIxMDgxMjE3MzgzNFoX
// SIG // DTIyMDkxNTE3MzgzNFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu2BwjeXSQdxF6x8F
// SIG // 1GWoEvK4ztmQe1eLQs9GDzilmb9Sgt3qFCifIS5EKiDg
// SIG // zHtqKbAyLcsNDSz/TceaKy+HyqMalJhIVmWwxdZ0Fed3
// SIG // M69bBiBwK+gtWBitqhZIjzZSs+Oovp1hrsxJLygh7XML
// SIG // 5DiCdgpDC7OTf6npJ+rF6QrTSaYMMSBKHfnbj+xkcAfh
// SIG // yqhTxU6z1UOq7ERa4Bmuscxnegyudy4MPAeTbde6QD50
// SIG // QiLQkD0T7iYhy2JARvc1TOhnG92zn4x085S948D3MbMk
// SIG // aOQNHLvcJGGTsjv4d1NUhhtvWYYlkykxTXMQLVtz0XZX
// SIG // oN4iJ5S+lLJeUHDwCQIDAQABo4IBfjCCAXowHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFOqaLrRdpqfTP5zrgAiy+2S3xx1FMFAGA1UdEQRJ
// SIG // MEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0
// SIG // aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMxNTIy
// SIG // KzQ2NjQxMjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
// SIG // tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsG
// SIG // AQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAEfTGT+m
// SIG // Q+BEs2cxilP1tH5emLonNAFlif4s/5TVgOt6wAODVMpW
// SIG // wyGdSRZyMK4Z1OWsR5h2y/qEsFSyk1sPqLw4+ZkaLnEy
// SIG // +taAEbT/0EDHaOuJa2XP6vMXhPQPCxJpAz7IzWyCzW1F
// SIG // EUy5fN5TlWp2MKLdrSkbV7euXoa+uftZDk3fFlrKIewQ
// SIG // yriRPgrRuqJcKd5U5oq4FLDUzAldvwiIdhO7jdwVI3ct
// SIG // jSkh4VuS+mytysrL3Ok1u5NN4Mt0OlYcGpNbNibLljwx
// SIG // RPNwOaolrrGNcNLxXC7bQWnOQlJtcbmh82NJn31f4uH1
// SIG // TK6EmJej82BdbPsxLDZkaCMouLW37HPm0R1refE2u4H4
// SIG // lBnBiIza/NY8yPYTDWwt1N1sQ7o8uh2PmoW2LOOhLWvO
// SIG // Hm7YtbuIe/RDAmQljocDtlxyVMMDY19fiVRJban/tLgm
// SIG // qUnoWJ/oujew++p5nr64QQPtZhm5khRkJqht+FtPVMPb
// SIG // qjlGvcTL73xMs9v2UYSQTWgoZJMJVpcY+wikePYY1cHq
// SIG // 7T5Io7p65f5T4a8knxPOCrrNYaCg0hash4QgnB7f7c8W
// SIG // rNyGhA2FJtHYNmDEnjQBejkauoGrm0xl8DmNRbCK9dRN
// SIG // cPptaJc3sLsLRqu3Q36Wz7vzWYZWCPod87Q0mZByox01
// SIG // Jrluh/j0EpvL9vPKMIIHejCCBWKgAwIBAgIKYQ6Q0gAA
// SIG // AAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEw
// SIG // NzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqC
// SIG // EE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS
// SIG // 2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
// SIG // 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/n
// SIG // qwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1
// SIG // eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++Mr
// SIG // WhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3o
// SIG // iU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2A
// SIG // LPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/
// SIG // jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxh
// SIG // H2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0P
// SIG // UUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8
// SIG // ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fuf
// SIG // r/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
// SIG // 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
// SIG // lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
// SIG // 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQD
// SIG // AgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUC
// SIG // lTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8E
// SIG // UzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQy
// SIG // MDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIw
// SIG // UDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDEx
// SIG // XzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEG
// SIG // CSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3By
// SIG // aW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
// SIG // ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
// SIG // AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
// SIG // 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8u
// SIG // LD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9
// SIG // i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
// SIG // HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6Sp
// SIG // BQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive
// SIG // /DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8My
// SIG // GOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/
// SIG // sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01m
// SIG // C8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a
// SIG // 8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5h
// SIG // YbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85el
// SIG // CUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7
// SIG // RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8
// SIG // i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
// SIG // MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
// SIG // /Xmfwb1tbWrJUnMTDXpQzTGCGY8wghmLAgEBMIGVMH4x
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
// SIG // c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAAJD
// SIG // VbG5NjMF584AAAAAAkMwDQYJYIZIAWUDBAIBBQCgga4w
// SIG // GQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
// SIG // BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcN
// SIG // AQkEMSIEIGlypxsm4TwYugHBiX9nVwYjaPZXeue6AGAC
// SIG // aey1AAapMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkA
// SIG // YwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEAXy6cXpXf
// SIG // lVrAClsb9m/G27GxhWEIAn4g8ig/o7Cw6idwqLkElECH
// SIG // lzg2qgx3IyOjTd/o61FkG8F4CY9xMR1mK2YiGxQWBxIH
// SIG // IVATYaEKFT3xZ0FB/J5ztYBi8g+9D2xatmWr3sskjXtS
// SIG // rWjnuZjSlQoL3mDRi5OXwE+XT+muVtCTzKPUfRFEEoAT
// SIG // LhUojMhoHd9icbRn4kgYEU02WcSqixs+wOwWP8nUtDSe
// SIG // UuLkTq3g0Q9GKNIn9zxo1ZnTs1+YiwzU4oclFbXfBmNG
// SIG // NHsshfcctRaZlPRgMedz5WgYhRPm28yfLAaDGScFfQDX
// SIG // z3vImAp9AaHSbEysU8GjeWWOcqGCFxkwghcVBgorBgEE
// SIG // AYI3AwMBMYIXBTCCFwEGCSqGSIb3DQEHAqCCFvIwghbu
// SIG // AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFZBgsqhkiG9w0B
// SIG // CRABBKCCAUgEggFEMIIBQAIBAQYKKwYBBAGEWQoDATAx
// SIG // MA0GCWCGSAFlAwQCAQUABCABo5zVohYD8g7iuVuhoFuK
// SIG // fAl//QgONTW//I27rBO/ogIGYf1S307sGBMyMDIyMDIx
// SIG // MTAxNTc0OC40ODlaMASAAgH0oIHYpIHVMIHSMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3NvZnQg
// SIG // SXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAkBgNV
// SIG // BAsTHVRoYWxlcyBUU1MgRVNOOjg2REYtNEJCQy05MzM1
// SIG // MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFtcCBT
// SIG // ZXJ2aWNloIIRaDCCBxQwggT8oAMCAQICEzMAAAGMAZdi
// SIG // RzZ2ZjsAAQAAAYwwDQYJKoZIhvcNAQELBQAwfDELMAkG
// SIG // A1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAO
// SIG // BgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29m
// SIG // dCBDb3Jwb3JhdGlvbjEmMCQGA1UEAxMdTWljcm9zb2Z0
// SIG // IFRpbWUtU3RhbXAgUENBIDIwMTAwHhcNMjExMDI4MTky
// SIG // NzQ0WhcNMjMwMTI2MTkyNzQ0WjCB0jELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEtMCsGA1UECxMkTWljcm9zb2Z0IElyZWxh
// SIG // bmQgT3BlcmF0aW9ucyBMaW1pdGVkMSYwJAYDVQQLEx1U
// SIG // aGFsZXMgVFNTIEVTTjo4NkRGLTRCQkMtOTMzNTElMCMG
// SIG // A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj
// SIG // ZTCCAiIwDQYJKoZIhvcNAQEBBQADggIPADCCAgoCggIB
// SIG // ANNIaEyhE/khrGssPvQRXZvrmfpLxDxi3ebBfF5U91Mu
// SIG // GBqk/Ovg6/Bt5Oqv5UWoIsUSr5/oNgBUS/Vbmagtbk72
// SIG // u3WTfQoYqLRxxZsskGT2pV3SUwvJyiK24EzFwMIf5m4Z
// SIG // 5qGsbCPYxpYr2IIuRjThO7uk1eFDrZ1T/IqIU1HzTCoW
// SIG // WiXc5lg44Vguy4z1yIWpvUIUZFc65MXySnOfQLGhg9z7
// SIG // 4kZIB6BsX6XVhzz2lvIohB43ODw5gipbltyfiHVN/B/j
// SIG // JCj5npAuxrUUy1ygQrlil0vE42WP8JDXM1jRKPpeSdzm
// SIG // XR3lYoMacwp3rJGX3B18awl9obnu6ib1q5LBUrZGWzhu
// SIG // yGJmn2DEK2RrpZe9j50taCHUHWJ0ef54HL0kG9dRkNJD
// SIG // TA84irEnfuYn1GmGyS2dFxMTVeKi1wkuuQ4/vBcoAo7T
// SIG // b5A4geR7PSOyvc8WbFG+3yikhhGfcgNCYE1m3ADwmD7b
// SIG // gB1SfFCmk/eu6SZu/q94YHHt/FVN/bKXnhx4GgkuL163
// SIG // pUy4lDAJdDrZOZ3CkCnNpBp77sD9kQkt5BBBQMaJ8C5/
// SIG // Kcnncq3mU2wTEAan9aN5I9IpTie/3/z93Na52mDtNRgy
// SIG // aJr+6LaW+c/tYa0qCLPLvunq7iSgk4oXdIv/G3OuwChe
// SIG // +sKVrr1vQYW1DE7FpMMOK+NnAgMBAAGjggE2MIIBMjAd
// SIG // BgNVHQ4EFgQUls5ThqmCIWCIeVadPojK3UCLUiMwHwYD
// SIG // VR0jBBgwFoAUn6cVXQBeYl2D9OXSZacbUzUZ6XIwXwYD
// SIG // VR0fBFgwVjBUoFKgUIZOaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraW9wcy9jcmwvTWljcm9zb2Z0JTIwVGlt
// SIG // ZS1TdGFtcCUyMFBDQSUyMDIwMTAoMSkuY3JsMGwGCCsG
// SIG // AQUFBwEBBGAwXjBcBggrBgEFBQcwAoZQaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWNy
// SIG // b3NvZnQlMjBUaW1lLVN0YW1wJTIwUENBJTIwMjAxMCgx
// SIG // KS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUEDDAKBggr
// SIG // BgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAgEA12jFRVjC
// SIG // CanW5UGSuqJLO3HQlMHjwJphCHnbMrrIFDCEJUKmo3wj
// SIG // /YhufMjhUkcdpOfY9oQAUmQcRZm5FY8IWBAtciT0JveO
// SIG // uIFM+RvrjludYvLnnngd4dovg5qFjSjUrpSDcn0hoFuj
// SIG // wgwokajt6p/CmFcy86Hpnz4q/1FceQgIFXBAwDLcW0a0
// SIG // x1wQAV8gmumkN/o7pFgeWkMy8OqoR4c+xyDlPav0PWNj
// SIG // Z1QSj38yJcD429ja0Bn0J107LHxQ/fDqUR6tO2VMdtYO
// SIG // KbPFd94UkpCdrg8IbaeVbRRpxfgMcxQZQr3N9yz05l7H
// SIG // M5cuvskIAEcJjR3jQNutlqiyyTPOCM/DktVXxNTesmAp
// SIG // C44PNfsxl7I7zBpowZYssWcF1hliZrKLwek+odRq35rz
// SIG // CrnThPdg+u0kd809w3QOScC/UwM1/FIYtGhmLZ+bjVAx
// SIG // W8SKMyETKS1aT/2Di54Pq9r/LPJclr9Gn48GWBwSeuDF
// SIG // lTcR3GjbY85GLUI3WeW4cpGunV/g7UA/W4d844tEpa31
// SIG // QyC8RG+jo8qrXxo+4lmbya2+AKiFYB0Gg84LosREvYnr
// SIG // RYpB33+qfewuaqG002ysDdABD96ubXsiPTSDlZSZdIIu
// SIG // SG3efB4n9ySzur6fuch146Ei/zJYRZrxrWmJkMA+ys05
// SIG // vbgAxeAcz/5sdr8wggdxMIIFWaADAgECAhMzAAAAFcXn
// SIG // a54Cm0mZAAAAAAAVMA0GCSqGSIb3DQEBCwUAMIGIMQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMTIwMAYDVQQDEylNaWNyb3Nv
// SIG // ZnQgUm9vdCBDZXJ0aWZpY2F0ZSBBdXRob3JpdHkgMjAx
// SIG // MDAeFw0yMTA5MzAxODIyMjVaFw0zMDA5MzAxODMyMjVa
// SIG // MHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xJjAkBgNVBAMTHU1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAyMDEwMIICIjAN
// SIG // BgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA5OGmTOe0
// SIG // ciELeaLL1yR5vQ7VgtP97pwHB9KpbE51yMo1V/YBf2xK
// SIG // 4OK9uT4XYDP/XE/HZveVU3Fa4n5KWv64NmeFRiMMtY0T
// SIG // z3cywBAY6GB9alKDRLemjkZrBxTzxXb1hlDcwUTIcVxR
// SIG // MTegCjhuje3XD9gmU3w5YQJ6xKr9cmmvHaus9ja+NSZk
// SIG // 2pg7uhp7M62AW36MEBydUv626GIl3GoPz130/o5Tz9bs
// SIG // hVZN7928jaTjkY+yOSxRnOlwaQ3KNi1wjjHINSi947SH
// SIG // JMPgyY9+tVSP3PoFVZhtaDuaRr3tpK56KTesy+uDRedG
// SIG // bsoy1cCGMFxPLOJiss254o2I5JasAUq7vnGpF1tnYN74
// SIG // kpEeHT39IM9zfUGaRnXNxF803RKJ1v2lIH1+/NmeRd+2
// SIG // ci/bfV+AutuqfjbsNkz2K26oElHovwUDo9Fzpk03dJQc
// SIG // NIIP8BDyt0cY7afomXw/TNuvXsLz1dhzPUNOwTM5TI4C
// SIG // vEJoLhDqhFFG4tG9ahhaYQFzymeiXtcodgLiMxhy16cg
// SIG // 8ML6EgrXY28MyTZki1ugpoMhXV8wdJGUlNi5UPkLiWHz
// SIG // NgY1GIRH29wb0f2y1BzFa/ZcUlFdEtsluq9QBXpsxREd
// SIG // cu+N+VLEhReTwDwV2xo3xwgVGD94q0W29R6HXtqPnhZy
// SIG // acaue7e3PmriLq0CAwEAAaOCAd0wggHZMBIGCSsGAQQB
// SIG // gjcVAQQFAgMBAAEwIwYJKwYBBAGCNxUCBBYEFCqnUv5k
// SIG // xJq+gpE8RjUpzxD/LwTuMB0GA1UdDgQWBBSfpxVdAF5i
// SIG // XYP05dJlpxtTNRnpcjBcBgNVHSAEVTBTMFEGDCsGAQQB
// SIG // gjdMg30BATBBMD8GCCsGAQUFBwIBFjNodHRwOi8vd3d3
// SIG // Lm1pY3Jvc29mdC5jb20vcGtpb3BzL0RvY3MvUmVwb3Np
// SIG // dG9yeS5odG0wEwYDVR0lBAwwCgYIKwYBBQUHAwgwGQYJ
// SIG // KwYBBAGCNxQCBAweCgBTAHUAYgBDAEEwCwYDVR0PBAQD
// SIG // AgGGMA8GA1UdEwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU
// SIG // 1fZWy4/oolxiaNE9lJBb186aGMQwVgYDVR0fBE8wTTBL
// SIG // oEmgR4ZFaHR0cDovL2NybC5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jcmwvcHJvZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAt
// SIG // MDYtMjMuY3JsMFoGCCsGAQUFBwEBBE4wTDBKBggrBgEF
// SIG // BQcwAoY+aHR0cDovL3d3dy5taWNyb3NvZnQuY29tL3Br
// SIG // aS9jZXJ0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5j
// SIG // cnQwDQYJKoZIhvcNAQELBQADggIBAJ1VffwqreEsH2cB
// SIG // MSRb4Z5yS/ypb+pcFLY+TkdkeLEGk5c9MTO1OdfCcTY/
// SIG // 2mRsfNB1OW27DzHkwo/7bNGhlBgi7ulmZzpTTd2YurYe
// SIG // eNg2LpypglYAA7AFvonoaeC6Ce5732pvvinLbtg/SHUB
// SIG // 2RjebYIM9W0jVOR4U3UkV7ndn/OOPcbzaN9l9qRWqveV
// SIG // tihVJ9AkvUCgvxm2EhIRXT0n4ECWOKz3+SmJw7wXsFSF
// SIG // QrP8DJ6LGYnn8AtqgcKBGUIZUnWKNsIdw2FzLixre24/
// SIG // LAl4FOmRsqlb30mjdAy87JGA0j3mSj5mO0+7hvoyGtmW
// SIG // 9I/2kQH2zsZ0/fZMcm8Qq3UwxTSwethQ/gpY3UA8x1Rt
// SIG // nWN0SCyxTkctwRQEcb9k+SS+c23Kjgm9swFXSVRk2XPX
// SIG // fx5bRAGOWhmRaw2fpCjcZxkoJLo4S5pu+yFUa2pFEUep
// SIG // 8beuyOiJXk+d0tBMdrVXVAmxaQFEfnyhYWxz/gq77EFm
// SIG // PWn9y8FBSX5+k77L+DvktxW/tM4+pTFRhLy/AsGConsX
// SIG // HRWJjXD+57XQKBqJC4822rpM+Zv/Cuk0+CQ1ZyvgDbjm
// SIG // jJnW4SLq8CdCPSWU5nR0W2rRnj7tfqAxM328y+l7vzhw
// SIG // RNGQ8cirOoo6CGJ/2XBjU02N7oJtpQUQwXEGahC0HVUz
// SIG // WLOhcGbyoYIC1zCCAkACAQEwggEAoYHYpIHVMIHSMQsw
// SIG // CQYDVQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQ
// SIG // MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9z
// SIG // b2Z0IENvcnBvcmF0aW9uMS0wKwYDVQQLEyRNaWNyb3Nv
// SIG // ZnQgSXJlbGFuZCBPcGVyYXRpb25zIExpbWl0ZWQxJjAk
// SIG // BgNVBAsTHVRoYWxlcyBUU1MgRVNOOjg2REYtNEJCQy05
// SIG // MzM1MSUwIwYDVQQDExxNaWNyb3NvZnQgVGltZS1TdGFt
// SIG // cCBTZXJ2aWNloiMKAQEwBwYFKw4DAhoDFQA0ovIU66v0
// SIG // PKKacHhsrmSzRCav1aCBgzCBgKR+MHwxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQSAyMDEwMA0GCSqGSIb3DQEBBQUAAgUA
// SIG // 5a+57DAiGA8yMDIyMDIxMTAwMjEwMFoYDzIwMjIwMjEy
// SIG // MDAyMTAwWjB3MD0GCisGAQQBhFkKBAExLzAtMAoCBQDl
// SIG // r7nsAgEAMAoCAQACAgSHAgH/MAcCAQACAhFPMAoCBQDl
// SIG // sQtsAgEAMDYGCisGAQQBhFkKBAIxKDAmMAwGCisGAQQB
// SIG // hFkKAwKgCjAIAgEAAgMHoSChCjAIAgEAAgMBhqAwDQYJ
// SIG // KoZIhvcNAQEFBQADgYEAceVh1uGgV2LJhqgHNnzoaKL/
// SIG // kUZGKnres9VTND4THJJ8DbTnbNXA4HEIkgOC+2hjtRDy
// SIG // N+Swt6i5zbW4LfdZZd9nRTF0jAwhtO9Ohf3cpnhqyq1y
// SIG // CcYssliJAT56cGrONfX1mcI0h2gE18clXRsUdgu3fFtG
// SIG // m4qajuyYECGYvjkxggQNMIIECQIBATCBkzB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAYwBl2JHNnZm
// SIG // OwABAAABjDANBglghkgBZQMEAgEFAKCCAUowGgYJKoZI
// SIG // hvcNAQkDMQ0GCyqGSIb3DQEJEAEEMC8GCSqGSIb3DQEJ
// SIG // BDEiBCDNcVTfPAQyPqRtqHrtQ+b/7VdBJOUUvYkL8jv8
// SIG // +4DgyjCB+gYLKoZIhvcNAQkQAi8xgeowgecwgeQwgb0E
// SIG // INWti/gVKpDPBn/E5iEFnYHik062FyMDqHzriYgYmGme
// SIG // MIGYMIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTACEzMAAAGMAZdiRzZ2ZjsAAQAAAYwwIgQghlhORpoi
// SIG // xOE65JtQkmaeh85Rm/4vb4wgdMuJjB8y+VAwDQYJKoZI
// SIG // hvcNAQELBQAEggIAEdsrn+Z++L9RsAW9GXYNCjEUY2Pc
// SIG // MJyTTopjB4JzhpF8q7oK6YrOoFVC1XwY1NYU9nYy6d65
// SIG // 3DN9ILRTLX481EwnAq4J0JgWxeKaQmYNQFwUJmxNcn4f
// SIG // mBG+O7Bi8nyYAM7LtOVB4V1iLPmK3s94MgPeL8EbhxQX
// SIG // YA/VqJKWP9Wb0mYW1jRvVCl+W0HRK+x3Nd5pZ7HMpKUq
// SIG // scSKgxG3+0ZwiZJ2G94lM/qkJE69Az8FPnp/Tx4U0l80
// SIG // EQftrOslxeXMyOmZYWPAm2/9VVIcO+gmBFm3/v9qU3P+
// SIG // LoB2CiFw0CO+9K7JhbuOcEmfXOdN0sXAPc8t77Bj/bFw
// SIG // 2472nBYWky6rUTr88lb67CBaXD0TuXdDS934uJQeff9o
// SIG // YiGKM61QxTltTrCKAwaFEigHRcVKG5UFYZouNrEmWO5w
// SIG // t5jvdmhPovWiFrbOP1tfC2AHjP5CTmE8mkUvHNKQZ01M
// SIG // lA89+naSM/WGhN6nwQt1Rmthn98+hW1t2Y7QGFFQ3W1N
// SIG // mwh5dOgO4MkhNl8yxt6WvP/Zi5tYGet9EKf4GcvcKLBP
// SIG // kzbMdzX28qI04qucxLMg0+F6UiuPKruHn5zt9F2zR/gI
// SIG // cuR11GbKPmOq0vt/IOcJ+BqlHDua8FIrlhNuFh3pq39V
// SIG // CtVWxt5k6W1gTFIc3rJUlkiPkDW+xzAc+f0ss1M=
// SIG // End signature block
