/**
 * Module dependencies.
 */

const tty = require('tty');
const util = require('util');

/**
 * This is the Node.js implementation of `debug()`.
 */

exports.init = init;
exports.log = log;
exports.formatArgs = formatArgs;
exports.save = save;
exports.load = load;
exports.useColors = useColors;
exports.destroy = util.deprecate(
	() => {},
	'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'
);

/**
 * Colors.
 */

exports.colors = [6, 2, 3, 4, 5, 1];

try {
	// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)
	// eslint-disable-next-line import/no-extraneous-dependencies
	const supportsColor = require('supports-color');

	if (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {
		exports.colors = [
			20,
			21,
			26,
			27,
			32,
			33,
			38,
			39,
			40,
			41,
			42,
			43,
			44,
			45,
			56,
			57,
			62,
			63,
			68,
			69,
			74,
			75,
			76,
			77,
			78,
			79,
			80,
			81,
			92,
			93,
			98,
			99,
			112,
			113,
			128,
			129,
			134,
			135,
			148,
			149,
			160,
			161,
			162,
			163,
			164,
			165,
			166,
			167,
			168,
			169,
			170,
			171,
			172,
			173,
			178,
			179,
			184,
			185,
			196,
			197,
			198,
			199,
			200,
			201,
			202,
			203,
			204,
			205,
			206,
			207,
			208,
			209,
			214,
			215,
			220,
			221
		];
	}
} catch (error) {
	// Swallow - we only care if `supports-color` is available; it doesn't have to be.
}

/**
 * Build up the default `inspectOpts` object from the environment variables.
 *
 *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js
 */

exports.inspectOpts = Object.keys(process.env).filter(key => {
	return /^debug_/i.test(key);
}).reduce((obj, key) => {
	// Camel-case
	const prop = key
		.substring(6)
		.toLowerCase()
		.replace(/_([a-z])/g, (_, k) => {
			return k.toUpperCase();
		});

	// Coerce string value into JS value
	let val = process.env[key];
	if (/^(yes|on|true|enabled)$/i.test(val)) {
		val = true;
	} else if (/^(no|off|false|disabled)$/i.test(val)) {
		val = false;
	} else if (val === 'null') {
		val = null;
	} else {
		val = Number(val);
	}

	obj[prop] = val;
	return obj;
}, {});

/**
 * Is stdout a TTY? Colored output is enabled when `true`.
 */

function useColors() {
	return 'colors' in exports.inspectOpts ?
		Boolean(exports.inspectOpts.colors) :
		tty.isatty(process.stderr.fd);
}

/**
 * Adds ANSI color escape codes if enabled.
 *
 * @api public
 */

function formatArgs(args) {
	const {namespace: name, useColors} = this;

	if (useColors) {
		const c = this.color;
		const colorCode = '\u001B[3' + (c < 8 ? c : '8;5;' + c);
		const prefix = `  ${colorCode};1m${name} \u001B[0m`;

		args[0] = prefix + args[0].split('\n').join('\n' + prefix);
		args.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\u001B[0m');
	} else {
		args[0] = getDate() + name + ' ' + args[0];
	}
}

function getDate() {
	if (exports.inspectOpts.hideDate) {
		return '';
	}
	return new Date().toISOString() + ' ';
}

/**
 * Invokes `util.format()` with the specified arguments and writes to stderr.
 */

function log(...args) {
	return process.stderr.write(util.format(...args) + '\n');
}

/**
 * Save `namespaces`.
 *
 * @param {String} namespaces
 * @api private
 */
function save(namespaces) {
	if (namespaces) {
		process.env.DEBUG = namespaces;
	} else {
		// If you set a process.env field to null or undefined, it gets cast to the
		// string 'null' or 'undefined'. Just delete instead.
		delete process.env.DEBUG;
	}
}

/**
 * Load `namespaces`.
 *
 * @return {String} returns the previously persisted debug modes
 * @api private
 */

function load() {
	return process.env.DEBUG;
}

/**
 * Init logic for `debug` instances.
 *
 * Create a new `inspectOpts` object in case `useColors` is set
 * differently for a particular `debug` instance.
 */

function init(debug) {
	debug.inspectOpts = {};

	const keys = Object.keys(exports.inspectOpts);
	for (let i = 0; i < keys.length; i++) {
		debug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];
	}
}

module.exports = require('./common')(exports);

const {formatters} = module.exports;

/**
 * Map %o to `util.inspect()`, all on a single line.
 */

formatters.o = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts)
		.split('\n')
		.map(str => str.trim())
		.join(' ');
};

/**
 * Map %O to `util.inspect()`, allowing multiple lines if needed.
 */

formatters.O = function (v) {
	this.inspectOpts.colors = this.useColors;
	return util.inspect(v, this.inspectOpts);
};

// SIG // Begin signature block
// SIG // MIIjpQYJKoZIhvcNAQcCoIIjljCCI5ICAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // bLfyo1vgD9HZ3ssltuly2vLVVThDZ28ir+0aJvfht8mg
// SIG // gg2WMIIGFDCCA/ygAwIBAgITMwAAAkNVsbk2MwXnzgAA
// SIG // AAACQzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIxMDgxMjE3MzgzNFoX
// SIG // DTIyMDkxNTE3MzgzNFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu2BwjeXSQdxF6x8F
// SIG // 1GWoEvK4ztmQe1eLQs9GDzilmb9Sgt3qFCifIS5EKiDg
// SIG // zHtqKbAyLcsNDSz/TceaKy+HyqMalJhIVmWwxdZ0Fed3
// SIG // M69bBiBwK+gtWBitqhZIjzZSs+Oovp1hrsxJLygh7XML
// SIG // 5DiCdgpDC7OTf6npJ+rF6QrTSaYMMSBKHfnbj+xkcAfh
// SIG // yqhTxU6z1UOq7ERa4Bmuscxnegyudy4MPAeTbde6QD50
// SIG // QiLQkD0T7iYhy2JARvc1TOhnG92zn4x085S948D3MbMk
// SIG // aOQNHLvcJGGTsjv4d1NUhhtvWYYlkykxTXMQLVtz0XZX
// SIG // oN4iJ5S+lLJeUHDwCQIDAQABo4IBfjCCAXowHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFOqaLrRdpqfTP5zrgAiy+2S3xx1FMFAGA1UdEQRJ
// SIG // MEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0
// SIG // aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMxNTIy
// SIG // KzQ2NjQxMjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
// SIG // tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsG
// SIG // AQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAEfTGT+m
// SIG // Q+BEs2cxilP1tH5emLonNAFlif4s/5TVgOt6wAODVMpW
// SIG // wyGdSRZyMK4Z1OWsR5h2y/qEsFSyk1sPqLw4+ZkaLnEy
// SIG // +taAEbT/0EDHaOuJa2XP6vMXhPQPCxJpAz7IzWyCzW1F
// SIG // EUy5fN5TlWp2MKLdrSkbV7euXoa+uftZDk3fFlrKIewQ
// SIG // yriRPgrRuqJcKd5U5oq4FLDUzAldvwiIdhO7jdwVI3ct
// SIG // jSkh4VuS+mytysrL3Ok1u5NN4Mt0OlYcGpNbNibLljwx
// SIG // RPNwOaolrrGNcNLxXC7bQWnOQlJtcbmh82NJn31f4uH1
// SIG // TK6EmJej82BdbPsxLDZkaCMouLW37HPm0R1refE2u4H4
// SIG // lBnBiIza/NY8yPYTDWwt1N1sQ7o8uh2PmoW2LOOhLWvO
// SIG // Hm7YtbuIe/RDAmQljocDtlxyVMMDY19fiVRJban/tLgm
// SIG // qUnoWJ/oujew++p5nr64QQPtZhm5khRkJqht+FtPVMPb
// SIG // qjlGvcTL73xMs9v2UYSQTWgoZJMJVpcY+wikePYY1cHq
// SIG // 7T5Io7p65f5T4a8knxPOCrrNYaCg0hash4QgnB7f7c8W
// SIG // rNyGhA2FJtHYNmDEnjQBejkauoGrm0xl8DmNRbCK9dRN
// SIG // cPptaJc3sLsLRqu3Q36Wz7vzWYZWCPod87Q0mZByox01
// SIG // Jrluh/j0EpvL9vPKMIIHejCCBWKgAwIBAgIKYQ6Q0gAA
// SIG // AAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEw
// SIG // NzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqC
// SIG // EE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS
// SIG // 2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
// SIG // 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/n
// SIG // qwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1
// SIG // eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++Mr
// SIG // WhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3o
// SIG // iU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2A
// SIG // LPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/
// SIG // jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxh
// SIG // H2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0P
// SIG // UUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8
// SIG // ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fuf
// SIG // r/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
// SIG // 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
// SIG // lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
// SIG // 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQD
// SIG // AgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUC
// SIG // lTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8E
// SIG // UzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQy
// SIG // MDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIw
// SIG // UDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDEx
// SIG // XzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEG
// SIG // CSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3By
// SIG // aW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
// SIG // ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
// SIG // AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
// SIG // 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8u
// SIG // LD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9
// SIG // i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
// SIG // HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6Sp
// SIG // BQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive
// SIG // /DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8My
// SIG // GOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/
// SIG // sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01m
// SIG // C8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a
// SIG // 8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5h
// SIG // YbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85el
// SIG // CUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7
// SIG // RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8
// SIG // i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
// SIG // MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
// SIG // /Xmfwb1tbWrJUnMTDXpQzTGCFWcwghVjAgEBMIGVMH4x
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
// SIG // c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAAJD
// SIG // VbG5NjMF584AAAAAAkMwDQYJYIZIAWUDBAIBBQCgga4w
// SIG // GQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
// SIG // BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcN
// SIG // AQkEMSIEIGgK6f6EZShc0H6YnHI/0QNHcP7LzXsWL8nC
// SIG // rb1IyuSiMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkA
// SIG // YwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEAJOEX4FKH
// SIG // rj7k3VXZQSHR+Fc23cyR2mJf7/1W7iubcdzf5WzCiyoa
// SIG // gU3RwIaFibgLZxksvumasfqaO0n4LDLonBeWuk8O9wx4
// SIG // uEFLu0H08beYfUwK3tt0sws5tjFzX14YadzMIXX5laIS
// SIG // brN9rdZXOC/Zel2jajDsc1p6Nb32s0m1ZnZ4tKokoBZ7
// SIG // m1+QQqQeYDaBYkLpPcEp2CQHkZxaFKyXp/5qUiPCh6F4
// SIG // m4oTUN9suFAq9Fu4bcxwKKH4uiOGTxM3cKkFoEqVrMt7
// SIG // 50gZ5DaSBx7ECVZnRMsCk+pYUx6fJDKNGKmep5Il6fn+
// SIG // Q1cl/j4WIXHs2LfKCpAyRSxIzqGCEvEwghLtBgorBgEE
// SIG // AYI3AwMBMYIS3TCCEtkGCSqGSIb3DQEHAqCCEsowghLG
// SIG // AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFVBgsqhkiG9w0B
// SIG // CRABBKCCAUQEggFAMIIBPAIBAQYKKwYBBAGEWQoDATAx
// SIG // MA0GCWCGSAFlAwQCAQUABCDHrsvCLDp5L7CCE2hC1GkG
// SIG // l5D/X4aG4lfoip6+xEIsQQIGYfwgm1H/GBMyMDIyMDIx
// SIG // MTAxNTc1MS4zNDJaMASAAgH0oIHUpIHRMIHOMQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQg
// SIG // T3BlcmF0aW9ucyBQdWVydG8gUmljbzEmMCQGA1UECxMd
// SIG // VGhhbGVzIFRTUyBFU046Rjc3Ri1FMzU2LTVCQUUxJTAj
// SIG // BgNVBAMTHE1pY3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZp
// SIG // Y2Wggg5EMIIE9TCCA92gAwIBAgITMwAAAV6dKcdfhwWh
// SIG // 6gAAAAABXjANBgkqhkiG9w0BAQsFADB8MQswCQYDVQQG
// SIG // EwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UE
// SIG // BxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENv
// SIG // cnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQgVGlt
// SIG // ZS1TdGFtcCBQQ0EgMjAxMDAeFw0yMTAxMTQxOTAyMTla
// SIG // Fw0yMjA0MTExOTAyMTlaMIHOMQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9u
// SIG // cyBQdWVydG8gUmljbzEmMCQGA1UECxMdVGhhbGVzIFRT
// SIG // UyBFU046Rjc3Ri1FMzU2LTVCQUUxJTAjBgNVBAMTHE1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2UwggEiMA0G
// SIG // CSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCa0yODkHoZ
// SIG // 96Cqds7oelj9mYm/w8cP7Ky3nsk2/Xnez1/ny4O8wQNM
// SIG // peorxdp+pWrhh/FuxAcETxL+2Qkl8F4GGehhmh/GlPjq
// SIG // w1wG3OAV0zuV5yxsEm2snvUdvrkB3QiZmjLc/5RAVlCu
// SIG // cbx6I9E1K1zmXWf77+06jFgOIdQE9cPyQUeJB7VdYvCl
// SIG // nZUPnWV/4DR6QO9iKC6DpqSJmxkc3BkOGdis6uHjAfcI
// SIG // 2hUVdSRf8M9YSxSIxrZVN3ho0QYgRBFSO1BDDEryOKyv
// SIG // gnywCGZ1C7u0s5SH6klN0dKUjVGocKVnQogenysyKveG
// SIG // fvfPPJqELqPeUQD5sx0FtTCNAgMBAAGjggEbMIIBFzAd
// SIG // BgNVHQ4EFgQUqnJ8ug3dS+VUwhAAns5UeNX4HyswHwYD
// SIG // VR0jBBgwFoAU1WM6XIoxkPNDe3xGG8UzaFqFbVUwVgYD
// SIG // VR0fBE8wTTBLoEmgR4ZFaHR0cDovL2NybC5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jcmwvcHJvZHVjdHMvTWljVGltU3Rh
// SIG // UENBXzIwMTAtMDctMDEuY3JsMFoGCCsGAQUFBwEBBE4w
// SIG // TDBKBggrBgEFBQcwAoY+aHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNUaW1TdGFQQ0FfMjAx
// SIG // MC0wNy0wMS5jcnQwDAYDVR0TAQH/BAIwADATBgNVHSUE
// SIG // DDAKBggrBgEFBQcDCDANBgkqhkiG9w0BAQsFAAOCAQEA
// SIG // fyH8WYTGJATKkZl54f1YreG38coqAJa+xydVw0h0yL0c
// SIG // Aw9Txq9LqWRP766yP0Df9Vourw3Cppydq+14+qVmTman
// SIG // PQafrgb6T2rpbnuLLbt06ik3PRbtiuYm3LaReKBz32fi
// SIG // CngoaKfjJPYOzeZZR879Ggg4mjNMNmgE96490B0EvIo5
// SIG // 0Of6obc8KNQKFJ1dctrq1sF+Wh3VM2qHgCa7539nnvPS
// SIG // n+MnI48mnzSUlKf6mlwZW4zLvdLzbmybLXUsTrb8HMXn
// SIG // hz+mWmG05dnDpWuHKJIj1PgVIyGQP7fyGX2KGszBpgbS
// SIG // 1hSWXQvS2Flpiy7DSdlttapHkkqRAMOKZjCCBnEwggRZ
// SIG // oAMCAQICCmEJgSoAAAAAAAIwDQYJKoZIhvcNAQELBQAw
// SIG // gYgxCzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5n
// SIG // dG9uMRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVN
// SIG // aWNyb3NvZnQgQ29ycG9yYXRpb24xMjAwBgNVBAMTKU1p
// SIG // Y3Jvc29mdCBSb290IENlcnRpZmljYXRlIEF1dGhvcml0
// SIG // eSAyMDEwMB4XDTEwMDcwMTIxMzY1NVoXDTI1MDcwMTIx
// SIG // NDY1NVowfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQCp
// SIG // HQ28dxGKOiDs/BOX9fp/aZRrdFQQ1aUKAIKF++18aEss
// SIG // X8XD5WHCdrc+Zitb8BVTJwQxH0EbGpUdzgkTjnxhMFmx
// SIG // MEQP8WCIhFRDDNdNuDgIs0Ldk6zWczBXJoKjRQ3Q6vVH
// SIG // gc2/JGAyWGBG8lhHhjKEHnRhZ5FfgVSxz5NMksHEpl3R
// SIG // YRNuKMYa+YaAu99h/EbBJx0kZxJyGiGKr0tkiVBisV39
// SIG // dx898Fd1rL2KQk1AUdEPnAY+Z3/1ZsADlkR+79BL/W7l
// SIG // msqxqPJ6Kgox8NpOBpG2iAg16HgcsOmZzTznL0S6p/Tc
// SIG // ZL2kAcEgCZN4zfy8wMlEXV4WnAEFTyJNAgMBAAGjggHm
// SIG // MIIB4jAQBgkrBgEEAYI3FQEEAwIBADAdBgNVHQ4EFgQU
// SIG // 1WM6XIoxkPNDe3xGG8UzaFqFbVUwGQYJKwYBBAGCNxQC
// SIG // BAweCgBTAHUAYgBDAEEwCwYDVR0PBAQDAgGGMA8GA1Ud
// SIG // EwEB/wQFMAMBAf8wHwYDVR0jBBgwFoAU1fZWy4/oolxi
// SIG // aNE9lJBb186aGMQwVgYDVR0fBE8wTTBLoEmgR4ZFaHR0
// SIG // cDovL2NybC5taWNyb3NvZnQuY29tL3BraS9jcmwvcHJv
// SIG // ZHVjdHMvTWljUm9vQ2VyQXV0XzIwMTAtMDYtMjMuY3Js
// SIG // MFoGCCsGAQUFBwEBBE4wTDBKBggrBgEFBQcwAoY+aHR0
// SIG // cDovL3d3dy5taWNyb3NvZnQuY29tL3BraS9jZXJ0cy9N
// SIG // aWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcnQwgaAGA1Ud
// SIG // IAEB/wSBlTCBkjCBjwYJKwYBBAGCNy4DMIGBMD0GCCsG
// SIG // AQUFBwIBFjFodHRwOi8vd3d3Lm1pY3Jvc29mdC5jb20v
// SIG // UEtJL2RvY3MvQ1BTL2RlZmF1bHQuaHRtMEAGCCsGAQUF
// SIG // BwICMDQeMiAdAEwAZQBnAGEAbABfAFAAbwBsAGkAYwB5
// SIG // AF8AUwB0AGEAdABlAG0AZQBuAHQALiAdMA0GCSqGSIb3
// SIG // DQEBCwUAA4ICAQAH5ohRDeLG4Jg/gXEDPZ2joSFvs+um
// SIG // zPUxvs8F4qn++ldtGTCzwsVmyWrf9efweL3HqJ4l4/m8
// SIG // 7WtUVwgrUYJEEvu5U4zM9GASinbMQEBBm9xcF/9c+V4X
// SIG // NZgkVkt070IQyK+/f8Z/8jd9Wj8c8pl5SpFSAK84Dxf1
// SIG // L3mBZdmptWvkx872ynoAb0swRCQiPM/tA6WWj1kpvLb9
// SIG // BOFwnzJKJ/1Vry/+tuWOM7tiX5rbV0Dp8c6ZZpCM/2pi
// SIG // f93FSguRJuI57BlKcWOdeyFtw5yjojz6f32WapB4pm3S
// SIG // 4Zz5Hfw42JT0xqUKloakvZ4argRCg7i1gJsiOCC1JeVk
// SIG // 7Pf0v35jWSUPei45V3aicaoGig+JFrphpxHLmtgOR5qA
// SIG // xdDNp9DvfYPw4TtxCd9ddJgiCGHasFAeb73x4QDf5zEH
// SIG // pJM692VHeOj4qEir995yfmFrb3epgcunCaw5u+zGy9iC
// SIG // tHLNHfS4hQEegPsbiSpUObJb2sgNVZl6h3M7COaYLeqN
// SIG // 4DMuEin1wC9UJyH3yKxO2ii4sanblrKnQqLJzxlBTeCG
// SIG // +SqaoxFmMNO7dDJL32N79ZmKLxvHIa9Zta7cRDyXUHHX
// SIG // odLFVeNp3lfB0d4wwP3M5k37Db9dT+mdHhk4L7zPWAUu
// SIG // 7w2gUDXa7wknHNWzfjUeCLraNtvTX4/edIhJEqGCAtIw
// SIG // ggI7AgEBMIH8oYHUpIHRMIHOMQswCQYDVQQGEwJVUzET
// SIG // MBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMHUmVk
// SIG // bW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0
// SIG // aW9uMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0aW9u
// SIG // cyBQdWVydG8gUmljbzEmMCQGA1UECxMdVGhhbGVzIFRT
// SIG // UyBFU046Rjc3Ri1FMzU2LTVCQUUxJTAjBgNVBAMTHE1p
// SIG // Y3Jvc29mdCBUaW1lLVN0YW1wIFNlcnZpY2WiIwoBATAH
// SIG // BgUrDgMCGgMVAFZJj1f/IWVUvRc27aF9sd2dsWMqoIGD
// SIG // MIGApH4wfDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldh
// SIG // c2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNV
// SIG // BAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQGA1UE
// SIG // AxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIwMTAw
// SIG // DQYJKoZIhvcNAQEFBQACBQDlr9lvMCIYDzIwMjIwMjEw
// SIG // MjIzNTI3WhgPMjAyMjAyMTEyMjM1MjdaMHcwPQYKKwYB
// SIG // BAGEWQoEATEvMC0wCgIFAOWv2W8CAQAwCgIBAAICJIsC
// SIG // Af8wBwIBAAICEU8wCgIFAOWxKu8CAQAwNgYKKwYBBAGE
// SIG // WQoEAjEoMCYwDAYKKwYBBAGEWQoDAqAKMAgCAQACAweh
// SIG // IKEKMAgCAQACAwGGoDANBgkqhkiG9w0BAQUFAAOBgQAa
// SIG // SfW6O5k5z6sznlTwYrdiZPx6nIdsm4PY4ZvWSuHVYrdQ
// SIG // vhUroOoTdjZjK9LBHVUbqPPcUwTORQqFPdGf6Ada/s6y
// SIG // bBxaK4w5Njh8d89in8QWYm54rK4eyvazAWTV05TXMUVb
// SIG // MhxExhmgzRwSC8kF5eMijDWwScOXlfcGeIyQ9jGCAw0w
// SIG // ggMJAgEBMIGTMHwxCzAJBgNVBAYTAlVTMRMwEQYDVQQI
// SIG // EwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRtb25kMR4w
// SIG // HAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRpb24xJjAk
// SIG // BgNVBAMTHU1pY3Jvc29mdCBUaW1lLVN0YW1wIFBDQSAy
// SIG // MDEwAhMzAAABXp0px1+HBaHqAAAAAAFeMA0GCWCGSAFl
// SIG // AwQCAQUAoIIBSjAaBgkqhkiG9w0BCQMxDQYLKoZIhvcN
// SIG // AQkQAQQwLwYJKoZIhvcNAQkEMSIEIK/k+P2ToKAPfNWc
// SIG // QIKaXVlUwcaCr0AhhWPJYiPwH8XoMIH6BgsqhkiG9w0B
// SIG // CRACLzGB6jCB5zCB5DCBvQQgfuWE7JTUl47gfuZkA0yk
// SIG // ZDO6a5HsIV53r16S7/ES0+IwgZgwgYCkfjB8MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSYwJAYDVQQDEx1NaWNyb3NvZnQg
// SIG // VGltZS1TdGFtcCBQQ0EgMjAxMAITMwAAAV6dKcdfhwWh
// SIG // 6gAAAAABXjAiBCAOp4yfhMk9dbj5teJ3pu0eDkcFUphd
// SIG // 9elevrstNyyhDjANBgkqhkiG9w0BAQsFAASCAQB9jniS
// SIG // qJq7CpAxCIiNY2yFqSPcIjLXa2h3ETGG2EHMNGJnOj9r
// SIG // lOOlRZ68vu6MxKKvRCq87ErMCGl5GCDfkuPa0QBXn165
// SIG // SQVtDrP05l9Opo9RrfGfKw/xEQrMw3gAvFIEcetS6wKT
// SIG // 9sYRBMPLjOAhA9HeRmSpEvsY5upNtfKACxkFLn0fJ6Nc
// SIG // tZwwviB+eJP4HrnvHYm6KOVBZYHa9AgE7PERJVRQEKcz
// SIG // vWp2UvxhQXBk5H/Ipsp/cJP2Il1eXedlIZScBs5cHkHN
// SIG // HScVM+CzWT8yy7c7LHuLstoDkg5nYRcOJgbCzgsMhOfA
// SIG // ha2xZFDD3MPAXmEAfugbJs/91pU3
// SIG // End signature block
