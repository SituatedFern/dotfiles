/// <reference types="node" />
import { Transform, TransformCallback, TransformOptions } from 'stream';
export interface ByteLengthOptions extends TransformOptions {
    /** the number of bytes on each data event */
    length: number;
}
/**
 * Emit data every number of bytes
 *
 * A transform stream that emits data as a buffer after a specific number of bytes are received. Runs in O(n) time.
 * @example
const SerialPort = require('serialport')
const ByteLength = require('@serialport/parser-byte-length')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new ByteLength({length: 8}))
parser.on('data', console.log) // will have 8 bytes per data event
 */
export declare class ByteLengthParser extends Transform {
    length: number;
    private position;
    private buffer;
    constructor(options: ByteLengthOptions);
    _transform(chunk: Buffer, _encoding: BufferEncoding, cb: TransformCallback): void;
    _flush(cb: TransformCallback): void;
}
