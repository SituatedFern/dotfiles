/// <reference types="node" />
import { Transform, TransformCallback, TransformOptions } from 'stream';
export interface InterByteTimeoutOptions extends TransformOptions {
    /** the period of silence in milliseconds after which data is emitted */
    interval: number;
    /** the maximum number of bytes after which data will be emitted. Defaults to 65536 */
    maxBufferSize?: number;
}
/**
 * Emits data if there is a pause between packets for the specified amount of time.
 *
 * A transform stream that emits data as a buffer after not receiving any bytes for the specified amount of time.
 * @example
const SerialPort = require('serialport')
const { InterByteTimeoutParser } = require('@serialport/parser-inter-byte-timeout')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new InterByteTimeoutParser({interval: 30}))
parser.on('data', console.log) // will emit data if there is a pause between packets greater than 30ms
 */
export declare class InterByteTimeoutParser extends Transform {
    maxBufferSize: number;
    currentPacket: number[];
    interval: number;
    intervalID: NodeJS.Timeout | undefined;
    constructor({ maxBufferSize, interval, ...transformOptions }: InterByteTimeoutOptions);
    _transform(chunk: Buffer, encoding: BufferEncoding, cb: TransformCallback): void;
    emitPacket(): void;
    _flush(cb: TransformCallback): void;
}
