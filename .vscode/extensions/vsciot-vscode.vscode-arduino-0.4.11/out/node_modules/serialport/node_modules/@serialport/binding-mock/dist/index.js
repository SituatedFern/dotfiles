'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var debugFactory = require('debug');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var debugFactory__default = /*#__PURE__*/_interopDefaultLegacy(debugFactory);

const debug = debugFactory__default["default"]('serialport/binding-mock');
let ports = {};
let serialNumber = 0;
function resolveNextTick() {
    return new Promise(resolve => process.nextTick(() => resolve()));
}
class CanceledError extends Error {
    constructor(message) {
        super(message);
        this.canceled = true;
    }
}
const MockBinding = {
    reset() {
        ports = {};
        serialNumber = 0;
    },
    // Create a mock port
    createPort(path, options = {}) {
        serialNumber++;
        const optWithDefaults = Object.assign({ echo: false, record: false, manufacturer: 'The J5 Robotics Company', vendorId: undefined, productId: undefined, maxReadSize: 1024 }, options);
        ports[path] = {
            data: Buffer.alloc(0),
            echo: optWithDefaults.echo,
            record: optWithDefaults.record,
            readyData: optWithDefaults.readyData,
            maxReadSize: optWithDefaults.maxReadSize,
            info: {
                path,
                manufacturer: optWithDefaults.manufacturer,
                serialNumber: `${serialNumber}`,
                pnpId: undefined,
                locationId: undefined,
                vendorId: optWithDefaults.vendorId,
                productId: optWithDefaults.productId,
            },
        };
        debug(serialNumber, 'created port', JSON.stringify({ path, opt: options }));
    },
    async list() {
        debug(null, 'list');
        return Object.values(ports).map(port => port.info);
    },
    async open(options) {
        var _a;
        if (!options || typeof options !== 'object' || Array.isArray(options)) {
            throw new TypeError('"options" is not an object');
        }
        if (!options.path) {
            throw new TypeError('"path" is not a valid port');
        }
        if (!options.baudRate) {
            throw new TypeError('"baudRate" is not a valid baudRate');
        }
        const openOptions = Object.assign({ dataBits: 8, lock: true, stopBits: 1, parity: 'none', rtscts: false, xon: false, xoff: false, xany: false, hupcl: true }, options);
        const { path } = openOptions;
        debug(null, `open: opening path ${path}`);
        const port = ports[path];
        await resolveNextTick();
        if (!port) {
            throw new Error(`Port does not exist - please call MockBinding.createPort('${path}') first`);
        }
        const serialNumber = port.info.serialNumber;
        if ((_a = port.openOpt) === null || _a === void 0 ? void 0 : _a.lock) {
            debug(serialNumber, 'open: Port is locked cannot open');
            throw new Error('Port is locked cannot open');
        }
        debug(serialNumber, `open: opened path ${path}`);
        port.openOpt = Object.assign({}, openOptions);
        return new MockPortBinding(port, openOptions);
    },
};
/**
 * Mock bindings for pretend serialport access
 */
class MockPortBinding {
    constructor(port, openOptions) {
        this.port = port;
        this.openOptions = openOptions;
        this.pendingRead = null;
        this.isOpen = true;
        this.lastWrite = null;
        this.recording = Buffer.alloc(0);
        this.writeOperation = null; // in flight promise or null
        this.serialNumber = port.info.serialNumber;
        if (port.readyData) {
            const data = port.readyData;
            process.nextTick(() => {
                if (this.isOpen) {
                    debug(this.serialNumber, 'emitting ready data');
                    this.emitData(data);
                }
            });
        }
    }
    // Emit data on a mock port
    emitData(data) {
        if (!this.isOpen || !this.port) {
            throw new Error('Port must be open to pretend to receive data');
        }
        const bufferData = Buffer.isBuffer(data) ? data : Buffer.from(data);
        debug(this.serialNumber, 'emitting data - pending read:', Boolean(this.pendingRead));
        this.port.data = Buffer.concat([this.port.data, bufferData]);
        if (this.pendingRead) {
            process.nextTick(this.pendingRead);
            this.pendingRead = null;
        }
    }
    async close() {
        debug(this.serialNumber, 'close');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        const port = this.port;
        if (!port) {
            throw new Error('already closed');
        }
        port.openOpt = undefined;
        // reset data on close
        port.data = Buffer.alloc(0);
        debug(this.serialNumber, 'port is closed');
        this.serialNumber = undefined;
        this.isOpen = false;
        if (this.pendingRead) {
            this.pendingRead(new CanceledError('port is closed'));
        }
    }
    async read(buffer, offset, length) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('"buffer" is not a Buffer');
        }
        if (typeof offset !== 'number' || isNaN(offset)) {
            throw new TypeError(`"offset" is not an integer got "${isNaN(offset) ? 'NaN' : typeof offset}"`);
        }
        if (typeof length !== 'number' || isNaN(length)) {
            throw new TypeError(`"length" is not an integer got "${isNaN(length) ? 'NaN' : typeof length}"`);
        }
        if (buffer.length < offset + length) {
            throw new Error('buffer is too small');
        }
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        debug(this.serialNumber, 'read', length, 'bytes');
        await resolveNextTick();
        if (!this.isOpen || !this.port) {
            throw new CanceledError('Read canceled');
        }
        if (this.port.data.length <= 0) {
            return new Promise((resolve, reject) => {
                this.pendingRead = err => {
                    if (err) {
                        return reject(err);
                    }
                    this.read(buffer, offset, length).then(resolve, reject);
                };
            });
        }
        const lengthToRead = this.port.maxReadSize > length ? length : this.port.maxReadSize;
        const data = this.port.data.slice(0, lengthToRead);
        const bytesRead = data.copy(buffer, offset);
        this.port.data = this.port.data.slice(lengthToRead);
        debug(this.serialNumber, 'read', bytesRead, 'bytes');
        return { bytesRead, buffer };
    }
    async write(buffer) {
        if (!Buffer.isBuffer(buffer)) {
            throw new TypeError('"buffer" is not a Buffer');
        }
        if (!this.isOpen || !this.port) {
            debug('write', 'error port is not open');
            throw new Error('Port is not open');
        }
        debug(this.serialNumber, 'write', buffer.length, 'bytes');
        if (this.writeOperation) {
            throw new Error('Overlapping writes are not supported and should be queued by the serialport object');
        }
        this.writeOperation = (async () => {
            await resolveNextTick();
            if (!this.isOpen || !this.port) {
                throw new Error('Write canceled');
            }
            const data = (this.lastWrite = Buffer.from(buffer)); // copy
            if (this.port.record) {
                this.recording = Buffer.concat([this.recording, data]);
            }
            if (this.port.echo) {
                process.nextTick(() => {
                    if (this.isOpen) {
                        this.emitData(data);
                    }
                });
            }
            this.writeOperation = null;
            debug(this.serialNumber, 'writing finished');
        })();
        return this.writeOperation;
    }
    async update(options) {
        if (typeof options !== 'object') {
            throw TypeError('"options" is not an object');
        }
        if (typeof options.baudRate !== 'number') {
            throw new TypeError('"options.baudRate" is not a number');
        }
        debug(this.serialNumber, 'update');
        if (!this.isOpen || !this.port) {
            throw new Error('Port is not open');
        }
        await resolveNextTick();
        if (this.port.openOpt) {
            this.port.openOpt.baudRate = options.baudRate;
        }
    }
    async set(options) {
        if (typeof options !== 'object') {
            throw new TypeError('"options" is not an object');
        }
        debug(this.serialNumber, 'set');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await resolveNextTick();
    }
    async get() {
        debug(this.serialNumber, 'get');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await resolveNextTick();
        return {
            cts: true,
            dsr: false,
            dcd: false,
        };
    }
    async getBaudRate() {
        var _a;
        debug(this.serialNumber, 'getBaudRate');
        if (!this.isOpen || !this.port) {
            throw new Error('Port is not open');
        }
        await resolveNextTick();
        if (!((_a = this.port.openOpt) === null || _a === void 0 ? void 0 : _a.baudRate)) {
            throw new Error('Internal Error');
        }
        return {
            baudRate: this.port.openOpt.baudRate,
        };
    }
    async flush() {
        debug(this.serialNumber, 'flush');
        if (!this.isOpen || !this.port) {
            throw new Error('Port is not open');
        }
        await resolveNextTick();
        this.port.data = Buffer.alloc(0);
    }
    async drain() {
        debug(this.serialNumber, 'drain');
        if (!this.isOpen) {
            throw new Error('Port is not open');
        }
        await this.writeOperation;
        await resolveNextTick();
    }
}

exports.CanceledError = CanceledError;
exports.MockBinding = MockBinding;
exports.MockPortBinding = MockPortBinding;

// SIG // Begin signature block
// SIG // MIIjpAYJKoZIhvcNAQcCoIIjlTCCI5ECAQExDzANBglg
// SIG // hkgBZQMEAgEFADB3BgorBgEEAYI3AgEEoGkwZzAyBgor
// SIG // BgEEAYI3AgEeMCQCAQEEEBDgyQbOONQRoqMAEEvTUJAC
// SIG // AQACAQACAQACAQACAQAwMTANBglghkgBZQMEAgEFAAQg
// SIG // N1B3LtlwQjxOw1oM9UVXNk9uubkUO9vAAhOY8k69xJKg
// SIG // gg2WMIIGFDCCA/ygAwIBAgITMwAAAkNVsbk2MwXnzgAA
// SIG // AAACQzANBgkqhkiG9w0BAQsFADB+MQswCQYDVQQGEwJV
// SIG // UzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4GA1UEBxMH
// SIG // UmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBv
// SIG // cmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQgQ29kZSBT
// SIG // aWduaW5nIFBDQSAyMDExMB4XDTIxMDgxMjE3MzgzNFoX
// SIG // DTIyMDkxNTE3MzgzNFowgYgxCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xMjAwBgNVBAMTKU1pY3Jvc29mdCAzcmQgUGFydHkg
// SIG // QXBwbGljYXRpb24gQ29tcG9uZW50MIIBIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAQ8AMIIBCgKCAQEAu2BwjeXSQdxF6x8F
// SIG // 1GWoEvK4ztmQe1eLQs9GDzilmb9Sgt3qFCifIS5EKiDg
// SIG // zHtqKbAyLcsNDSz/TceaKy+HyqMalJhIVmWwxdZ0Fed3
// SIG // M69bBiBwK+gtWBitqhZIjzZSs+Oovp1hrsxJLygh7XML
// SIG // 5DiCdgpDC7OTf6npJ+rF6QrTSaYMMSBKHfnbj+xkcAfh
// SIG // yqhTxU6z1UOq7ERa4Bmuscxnegyudy4MPAeTbde6QD50
// SIG // QiLQkD0T7iYhy2JARvc1TOhnG92zn4x085S948D3MbMk
// SIG // aOQNHLvcJGGTsjv4d1NUhhtvWYYlkykxTXMQLVtz0XZX
// SIG // oN4iJ5S+lLJeUHDwCQIDAQABo4IBfjCCAXowHwYDVR0l
// SIG // BBgwFgYKKwYBBAGCN0wRAQYIKwYBBQUHAwMwHQYDVR0O
// SIG // BBYEFOqaLrRdpqfTP5zrgAiy+2S3xx1FMFAGA1UdEQRJ
// SIG // MEekRTBDMSkwJwYDVQQLEyBNaWNyb3NvZnQgT3BlcmF0
// SIG // aW9ucyBQdWVydG8gUmljbzEWMBQGA1UEBRMNMjMxNTIy
// SIG // KzQ2NjQxMjAfBgNVHSMEGDAWgBRIbmTlUAXTgqoXNzci
// SIG // tW2oynUClTBUBgNVHR8ETTBLMEmgR6BFhkNodHRwOi8v
// SIG // d3d3Lm1pY3Jvc29mdC5jb20vcGtpb3BzL2NybC9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3JsMGEGCCsG
// SIG // AQUFBwEBBFUwUzBRBggrBgEFBQcwAoZFaHR0cDovL3d3
// SIG // dy5taWNyb3NvZnQuY29tL3BraW9wcy9jZXJ0cy9NaWND
// SIG // b2RTaWdQQ0EyMDExXzIwMTEtMDctMDguY3J0MAwGA1Ud
// SIG // EwEB/wQCMAAwDQYJKoZIhvcNAQELBQADggIBAEfTGT+m
// SIG // Q+BEs2cxilP1tH5emLonNAFlif4s/5TVgOt6wAODVMpW
// SIG // wyGdSRZyMK4Z1OWsR5h2y/qEsFSyk1sPqLw4+ZkaLnEy
// SIG // +taAEbT/0EDHaOuJa2XP6vMXhPQPCxJpAz7IzWyCzW1F
// SIG // EUy5fN5TlWp2MKLdrSkbV7euXoa+uftZDk3fFlrKIewQ
// SIG // yriRPgrRuqJcKd5U5oq4FLDUzAldvwiIdhO7jdwVI3ct
// SIG // jSkh4VuS+mytysrL3Ok1u5NN4Mt0OlYcGpNbNibLljwx
// SIG // RPNwOaolrrGNcNLxXC7bQWnOQlJtcbmh82NJn31f4uH1
// SIG // TK6EmJej82BdbPsxLDZkaCMouLW37HPm0R1refE2u4H4
// SIG // lBnBiIza/NY8yPYTDWwt1N1sQ7o8uh2PmoW2LOOhLWvO
// SIG // Hm7YtbuIe/RDAmQljocDtlxyVMMDY19fiVRJban/tLgm
// SIG // qUnoWJ/oujew++p5nr64QQPtZhm5khRkJqht+FtPVMPb
// SIG // qjlGvcTL73xMs9v2UYSQTWgoZJMJVpcY+wikePYY1cHq
// SIG // 7T5Io7p65f5T4a8knxPOCrrNYaCg0hash4QgnB7f7c8W
// SIG // rNyGhA2FJtHYNmDEnjQBejkauoGrm0xl8DmNRbCK9dRN
// SIG // cPptaJc3sLsLRqu3Q36Wz7vzWYZWCPod87Q0mZByox01
// SIG // Jrluh/j0EpvL9vPKMIIHejCCBWKgAwIBAgIKYQ6Q0gAA
// SIG // AAAAAzANBgkqhkiG9w0BAQsFADCBiDELMAkGA1UEBhMC
// SIG // VVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
// SIG // B1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBDb3Jw
// SIG // b3JhdGlvbjEyMDAGA1UEAxMpTWljcm9zb2Z0IFJvb3Qg
// SIG // Q2VydGlmaWNhdGUgQXV0aG9yaXR5IDIwMTEwHhcNMTEw
// SIG // NzA4MjA1OTA5WhcNMjYwNzA4MjEwOTA5WjB+MQswCQYD
// SIG // VQQGEwJVUzETMBEGA1UECBMKV2FzaGluZ3RvbjEQMA4G
// SIG // A1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0
// SIG // IENvcnBvcmF0aW9uMSgwJgYDVQQDEx9NaWNyb3NvZnQg
// SIG // Q29kZSBTaWduaW5nIFBDQSAyMDExMIICIjANBgkqhkiG
// SIG // 9w0BAQEFAAOCAg8AMIICCgKCAgEAq/D6chAcLq3YbqqC
// SIG // EE00uvK2WCGfQhsqa+laUKq4BjgaBEm6f8MMHt03a8YS
// SIG // 2AvwOMKZBrDIOdUBFDFC04kNeWSHfpRgJGyvnkmc6Whe
// SIG // 0t+bU7IKLMOv2akrrnoJr9eWWcpgGgXpZnboMlImEi/n
// SIG // qwhQz7NEt13YxC4Ddato88tt8zpcoRb0RrrgOGSsbmQ1
// SIG // eKagYw8t00CT+OPeBw3VXHmlSSnnDb6gE3e+lD3v++Mr
// SIG // WhAfTVYoonpy4BI6t0le2O3tQ5GD2Xuye4Yb2T6xjF3o
// SIG // iU+EGvKhL1nkkDstrjNYxbc+/jLTswM9sbKvkjh+0p2A
// SIG // LPVOVpEhNSXDOW5kf1O6nA+tGSOEy/S6A4aN91/w0FK/
// SIG // jJSHvMAhdCVfGCi2zCcoOCWYOUo2z3yxkq4cI6epZuxh
// SIG // H2rhKEmdX4jiJV3TIUs+UsS1Vz8kA/DRelsv1SPjcF0P
// SIG // UUZ3s/gA4bysAoJf28AVs70b1FVL5zmhD+kjSbwYuER8
// SIG // ReTBw3J64HLnJN+/RpnF78IcV9uDjexNSTCnq47f7Fuf
// SIG // r/zdsGbiwZeBe+3W7UvnSSmnEyimp31ngOaKYnhfsi+E
// SIG // 11ecXL93KCjx7W3DKI8sj0A3T8HhhUSJxAlMxdSlQy90
// SIG // lfdu+HggWCwTXWCVmj5PM4TasIgX3p5O9JawvEagbJjS
// SIG // 4NaIjAsCAwEAAaOCAe0wggHpMBAGCSsGAQQBgjcVAQQD
// SIG // AgEAMB0GA1UdDgQWBBRIbmTlUAXTgqoXNzcitW2oynUC
// SIG // lTAZBgkrBgEEAYI3FAIEDB4KAFMAdQBiAEMAQTALBgNV
// SIG // HQ8EBAMCAYYwDwYDVR0TAQH/BAUwAwEB/zAfBgNVHSME
// SIG // GDAWgBRyLToCMZBDuRQFTuHqp8cx0SOJNDBaBgNVHR8E
// SIG // UzBRME+gTaBLhklodHRwOi8vY3JsLm1pY3Jvc29mdC5j
// SIG // b20vcGtpL2NybC9wcm9kdWN0cy9NaWNSb29DZXJBdXQy
// SIG // MDExXzIwMTFfMDNfMjIuY3JsMF4GCCsGAQUFBwEBBFIw
// SIG // UDBOBggrBgEFBQcwAoZCaHR0cDovL3d3dy5taWNyb3Nv
// SIG // ZnQuY29tL3BraS9jZXJ0cy9NaWNSb29DZXJBdXQyMDEx
// SIG // XzIwMTFfMDNfMjIuY3J0MIGfBgNVHSAEgZcwgZQwgZEG
// SIG // CSsGAQQBgjcuAzCBgzA/BggrBgEFBQcCARYzaHR0cDov
// SIG // L3d3dy5taWNyb3NvZnQuY29tL3BraW9wcy9kb2NzL3By
// SIG // aW1hcnljcHMuaHRtMEAGCCsGAQUFBwICMDQeMiAdAEwA
// SIG // ZQBnAGEAbABfAHAAbwBsAGkAYwB5AF8AcwB0AGEAdABl
// SIG // AG0AZQBuAHQALiAdMA0GCSqGSIb3DQEBCwUAA4ICAQBn
// SIG // 8oalmOBUeRou09h0ZyKbC5YR4WOSmUKWfdJ5DJDBZV8u
// SIG // LD74w3LRbYP+vj/oCso7v0epo/Np22O/IjWll11lhJB9
// SIG // i0ZQVdgMknzSGksc8zxCi1LQsP1r4z4HLimb5j0bpdS1
// SIG // HXeUOeLpZMlEPXh6I/MTfaaQdION9MsmAkYqwooQu6Sp
// SIG // BQyb7Wj6aC6VoCo/KmtYSWMfCWluWpiW5IP0wI/zRive
// SIG // /DvQvTXvbiWu5a8n7dDd8w6vmSiXmE0OPQvyCInWH8My
// SIG // GOLwxS3OW560STkKxgrCxq2u5bLZ2xWIUUVYODJxJxp/
// SIG // sfQn+N4sOiBpmLJZiWhub6e3dMNABQamASooPoI/E01m
// SIG // C8CzTfXhj38cbxV9Rad25UAqZaPDXVJihsMdYzaXht/a
// SIG // 8/jyFqGaJ+HNpZfQ7l1jQeNbB5yHPgZ3BtEGsXUfFL5h
// SIG // YbXw3MYbBL7fQccOKO7eZS/sl/ahXJbYANahRr1Z85el
// SIG // CUtIEJmAH9AAKcWxm6U/RXceNcbSoqKfenoi+kiVH6v7
// SIG // RyOA9Z74v2u3S5fi63V4GuzqN5l5GEv/1rMjaHXmr/r8
// SIG // i+sLgOppO6/8MO0ETI7f33VtY5E90Z1WTk+/gFcioXgR
// SIG // MiF670EKsT/7qMykXcGhiJtXcVZOSEXAQsmbdlsKgEhr
// SIG // /Xmfwb1tbWrJUnMTDXpQzTGCFWYwghViAgEBMIGVMH4x
// SIG // CzAJBgNVBAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9u
// SIG // MRAwDgYDVQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNy
// SIG // b3NvZnQgQ29ycG9yYXRpb24xKDAmBgNVBAMTH01pY3Jv
// SIG // c29mdCBDb2RlIFNpZ25pbmcgUENBIDIwMTECEzMAAAJD
// SIG // VbG5NjMF584AAAAAAkMwDQYJYIZIAWUDBAIBBQCgga4w
// SIG // GQYJKoZIhvcNAQkDMQwGCisGAQQBgjcCAQQwHAYKKwYB
// SIG // BAGCNwIBCzEOMAwGCisGAQQBgjcCARUwLwYJKoZIhvcN
// SIG // AQkEMSIEIKmWE939qMTOwbCP4zp0nL+nH8fVYWW0YHzm
// SIG // 5m3GyAbbMEIGCisGAQQBgjcCAQwxNDAyoBSAEgBNAGkA
// SIG // YwByAG8AcwBvAGYAdKEagBhodHRwOi8vd3d3Lm1pY3Jv
// SIG // c29mdC5jb20wDQYJKoZIhvcNAQEBBQAEggEAFR1jUwl2
// SIG // GZlEOpDlCxzIy+3OuHF4phvLeMJsH4FxLmaHWfsF4n//
// SIG // S605UwdgbXZStblwovOJfGIqE0wR6ukjebLGXf2OLYmQ
// SIG // EDWS4cvGHFv6YnA2squSOdKSAeRs7hfDuHbQbVdL1KXo
// SIG // kIiucJdecl95oAXFkb+IQQ9QWHsG3LSC9aYB6lLQmym7
// SIG // LbtKFGlby4o4KiuNDLvXcNryeuvnNcV83hJJnvPXtT3N
// SIG // UPN6LlLQjKpBQ5f8GnM6O0gmACp8qfHHGnz1Jqf3vWEy
// SIG // hraRKtDkkLbGLvnlCUy18tx0DodswHjtkPlXE3bMIgnv
// SIG // REMWRbRSs2GWYU4OE60Hezk0nqGCEvAwghLsBgorBgEE
// SIG // AYI3AwMBMYIS3DCCEtgGCSqGSIb3DQEHAqCCEskwghLF
// SIG // AgEDMQ8wDQYJYIZIAWUDBAIBBQAwggFUBgsqhkiG9w0B
// SIG // CRABBKCCAUMEggE/MIIBOwIBAQYKKwYBBAGEWQoDATAx
// SIG // MA0GCWCGSAFlAwQCAQUABCAZqiQnSigudzlRcb/NoxDU
// SIG // ICPdqsieA03UWYmdOuqjRQIGYfwg5iEzGBIyMDIyMDIx
// SIG // MTAxNTc0My45NVowBIACAfSggdSkgdEwgc4xCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xKTAnBgNVBAsTIE1pY3Jvc29mdCBP
// SIG // cGVyYXRpb25zIFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1U
// SIG // aGFsZXMgVFNTIEVTTjozMkJELUUzRDUtM0IxRDElMCMG
// SIG // A1UEAxMcTWljcm9zb2Z0IFRpbWUtU3RhbXAgU2Vydmlj
// SIG // ZaCCDkQwggT1MIID3aADAgECAhMzAAABYtD+AvMB5c1J
// SIG // AAAAAAFiMA0GCSqGSIb3DQEBCwUAMHwxCzAJBgNVBAYT
// SIG // AlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQH
// SIG // EwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29y
// SIG // cG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBUaW1l
// SIG // LVN0YW1wIFBDQSAyMDEwMB4XDTIxMDExNDE5MDIyMloX
// SIG // DTIyMDQxMTE5MDIyMlowgc4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25z
// SIG // IFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNT
// SIG // IEVTTjozMkJELUUzRDUtM0IxRDElMCMGA1UEAxMcTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZTCCASIwDQYJ
// SIG // KoZIhvcNAQEBBQADggEPADCCAQoCggEBAO+GodT2ucL3
// SIG // Mr2DQsv2ELNbSvKyBpYdUKtUBWiZmFVy18pG/pucgkrc
// SIG // 5i9tu8CY7GpWV/CQNmHG2mVeSHMJvbwCc/AAv7JP3bFC
// SIG // t6Zg75IbVSNOGA1eqLbmQiC6UAfSKXLN3dHtQ5diihb3
// SIG // YmzpNP9K0cVPZfv2MXm+ZVU0RES8cyPkXel7+UEGE+kq
// SIG // diBNDdb8yBXd8sju+90+V4nzYC+ZWW7SFJ2FFZlASpVa
// SIG // Hpjv+eGohXlQaSBvmM4Q0xe3LhzQM8ViGz9cLeFSKgFf
// SIG // SY7qizL7wUg+eqYvDUyjPX8axEQHmk0th23wWH5p0Wdu
// SIG // ws43qNIo0OQ0mRotBK71nykCAwEAAaOCARswggEXMB0G
// SIG // A1UdDgQWBBTLxEoRYEpDtzp84B5WlZN2kP4qazAfBgNV
// SIG // HSMEGDAWgBTVYzpcijGQ80N7fEYbxTNoWoVtVTBWBgNV
// SIG // HR8ETzBNMEugSaBHhkVodHRwOi8vY3JsLm1pY3Jvc29m
// SIG // dC5jb20vcGtpL2NybC9wcm9kdWN0cy9NaWNUaW1TdGFQ
// SIG // Q0FfMjAxMC0wNy0wMS5jcmwwWgYIKwYBBQUHAQEETjBM
// SIG // MEoGCCsGAQUFBzAChj5odHRwOi8vd3d3Lm1pY3Jvc29m
// SIG // dC5jb20vcGtpL2NlcnRzL01pY1RpbVN0YVBDQV8yMDEw
// SIG // LTA3LTAxLmNydDAMBgNVHRMBAf8EAjAAMBMGA1UdJQQM
// SIG // MAoGCCsGAQUFBwMIMA0GCSqGSIb3DQEBCwUAA4IBAQAt
// SIG // Qa3DoXYbW/cXACbcVSFGe4gC8GXsFxSHT3JgwFU/NdJO
// SIG // cbkcFTVvTp6vlmTvHm6sIjknRBB0Xi1NBTqPw20u6u/T
// SIG // 7Cnc/z0gT6mf9crI0VR9C+R1CtjezYKZEdZZ7fuNQWjs
// SIG // yftNDhQy+Rqnqryt0VoezLalheiinHzZD/4Y4hZYPf0u
// SIG // 8TSv1ZfKtdBweWG3QU0Lp/I9SbIoemDG97RULMcPvq2u
// SIG // fhUp3OMiYQGL1WqkykSnqRJsM2IcA4l4dmoPNP6dLg5D
// SIG // r7NVoYKIMInaQVZjSwDMZhWryvfizX0SrzyLgkMPhLMV
// SIG // kfLxQQSQ37NeFk7F1RfeAkNWAh6mCORBMIIGcTCCBFmg
// SIG // AwIBAgIKYQmBKgAAAAAAAjANBgkqhkiG9w0BAQsFADCB
// SIG // iDELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0
// SIG // b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1p
// SIG // Y3Jvc29mdCBDb3Jwb3JhdGlvbjEyMDAGA1UEAxMpTWlj
// SIG // cm9zb2Z0IFJvb3QgQ2VydGlmaWNhdGUgQXV0aG9yaXR5
// SIG // IDIwMTAwHhcNMTAwNzAxMjEzNjU1WhcNMjUwNzAxMjE0
// SIG // NjU1WjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD
// SIG // Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDCC
// SIG // ASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAKkd
// SIG // Dbx3EYo6IOz8E5f1+n9plGt0VBDVpQoAgoX77XxoSyxf
// SIG // xcPlYcJ2tz5mK1vwFVMnBDEfQRsalR3OCROOfGEwWbEw
// SIG // RA/xYIiEVEMM1024OAizQt2TrNZzMFcmgqNFDdDq9UeB
// SIG // zb8kYDJYYEbyWEeGMoQedGFnkV+BVLHPk0ySwcSmXdFh
// SIG // E24oxhr5hoC732H8RsEnHSRnEnIaIYqvS2SJUGKxXf13
// SIG // Hz3wV3WsvYpCTUBR0Q+cBj5nf/VmwAOWRH7v0Ev9buWa
// SIG // yrGo8noqCjHw2k4GkbaICDXoeByw6ZnNPOcvRLqn9Nxk
// SIG // vaQBwSAJk3jN/LzAyURdXhacAQVPIk0CAwEAAaOCAeYw
// SIG // ggHiMBAGCSsGAQQBgjcVAQQDAgEAMB0GA1UdDgQWBBTV
// SIG // YzpcijGQ80N7fEYbxTNoWoVtVTAZBgkrBgEEAYI3FAIE
// SIG // DB4KAFMAdQBiAEMAQTALBgNVHQ8EBAMCAYYwDwYDVR0T
// SIG // AQH/BAUwAwEB/zAfBgNVHSMEGDAWgBTV9lbLj+iiXGJo
// SIG // 0T2UkFvXzpoYxDBWBgNVHR8ETzBNMEugSaBHhkVodHRw
// SIG // Oi8vY3JsLm1pY3Jvc29mdC5jb20vcGtpL2NybC9wcm9k
// SIG // dWN0cy9NaWNSb29DZXJBdXRfMjAxMC0wNi0yMy5jcmww
// SIG // WgYIKwYBBQUHAQEETjBMMEoGCCsGAQUFBzAChj5odHRw
// SIG // Oi8vd3d3Lm1pY3Jvc29mdC5jb20vcGtpL2NlcnRzL01p
// SIG // Y1Jvb0NlckF1dF8yMDEwLTA2LTIzLmNydDCBoAYDVR0g
// SIG // AQH/BIGVMIGSMIGPBgkrBgEEAYI3LgMwgYEwPQYIKwYB
// SIG // BQUHAgEWMWh0dHA6Ly93d3cubWljcm9zb2Z0LmNvbS9Q
// SIG // S0kvZG9jcy9DUFMvZGVmYXVsdC5odG0wQAYIKwYBBQUH
// SIG // AgIwNB4yIB0ATABlAGcAYQBsAF8AUABvAGwAaQBjAHkA
// SIG // XwBTAHQAYQB0AGUAbQBlAG4AdAAuIB0wDQYJKoZIhvcN
// SIG // AQELBQADggIBAAfmiFEN4sbgmD+BcQM9naOhIW+z66bM
// SIG // 9TG+zwXiqf76V20ZMLPCxWbJat/15/B4vceoniXj+bzt
// SIG // a1RXCCtRgkQS+7lTjMz0YBKKdsxAQEGb3FwX/1z5Xhc1
// SIG // mCRWS3TvQhDIr79/xn/yN31aPxzymXlKkVIArzgPF/Uv
// SIG // eYFl2am1a+THzvbKegBvSzBEJCI8z+0DpZaPWSm8tv0E
// SIG // 4XCfMkon/VWvL/625Y4zu2JfmttXQOnxzplmkIz/amJ/
// SIG // 3cVKC5Em4jnsGUpxY517IW3DnKOiPPp/fZZqkHimbdLh
// SIG // nPkd/DjYlPTGpQqWhqS9nhquBEKDuLWAmyI4ILUl5WTs
// SIG // 9/S/fmNZJQ96LjlXdqJxqgaKD4kWumGnEcua2A5HmoDF
// SIG // 0M2n0O99g/DhO3EJ3110mCIIYdqwUB5vvfHhAN/nMQek
// SIG // kzr3ZUd46PioSKv33nJ+YWtvd6mBy6cJrDm77MbL2IK0
// SIG // cs0d9LiFAR6A+xuJKlQ5slvayA1VmXqHczsI5pgt6o3g
// SIG // My4SKfXAL1QnIffIrE7aKLixqduWsqdCosnPGUFN4Ib5
// SIG // KpqjEWYw07t0MkvfY3v1mYovG8chr1m1rtxEPJdQcdeh
// SIG // 0sVV42neV8HR3jDA/czmTfsNv11P6Z0eGTgvvM9YBS7v
// SIG // DaBQNdrvCScc1bN+NR4Iuto229Nfj950iEkSoYIC0jCC
// SIG // AjsCAQEwgfyhgdSkgdEwgc4xCzAJBgNVBAYTAlVTMRMw
// SIG // EQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYDVQQHEwdSZWRt
// SIG // b25kMR4wHAYDVQQKExVNaWNyb3NvZnQgQ29ycG9yYXRp
// SIG // b24xKTAnBgNVBAsTIE1pY3Jvc29mdCBPcGVyYXRpb25z
// SIG // IFB1ZXJ0byBSaWNvMSYwJAYDVQQLEx1UaGFsZXMgVFNT
// SIG // IEVTTjozMkJELUUzRDUtM0IxRDElMCMGA1UEAxMcTWlj
// SIG // cm9zb2Z0IFRpbWUtU3RhbXAgU2VydmljZaIjCgEBMAcG
// SIG // BSsOAwIaAxUAmrP6Chrbz0ax7s57n5Pop3VC8gyggYMw
// SIG // gYCkfjB8MQswCQYDVQQGEwJVUzETMBEGA1UECBMKV2Fz
// SIG // aGluZ3RvbjEQMA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UE
// SIG // ChMVTWljcm9zb2Z0IENvcnBvcmF0aW9uMSYwJAYDVQQD
// SIG // Ex1NaWNyb3NvZnQgVGltZS1TdGFtcCBQQ0EgMjAxMDAN
// SIG // BgkqhkiG9w0BAQUFAAIFAOWv2ZswIhgPMjAyMjAyMTAy
// SIG // MjM2MTFaGA8yMDIyMDIxMTIyMzYxMVowdzA9BgorBgEE
// SIG // AYRZCgQBMS8wLTAKAgUA5a/ZmwIBADAKAgEAAgIcgwIB
// SIG // /zAHAgEAAgIRXjAKAgUA5bErGwIBADA2BgorBgEEAYRZ
// SIG // CgQCMSgwJjAMBgorBgEEAYRZCgMCoAowCAIBAAIDB6Eg
// SIG // oQowCAIBAAIDAYagMA0GCSqGSIb3DQEBBQUAA4GBAILj
// SIG // xT7KzYRhAliz8CCqKdLJOAZJ4S30hBT5R1eEQOiIQX4+
// SIG // U8YhBGXbxCp/1ZIMM4rxMxXRftsEmBEbQkmnmxrHsk3X
// SIG // 8+0jIEmNRKoDpW3iLVIjbpV7M1ckwUOl/9vIR3JakPzX
// SIG // 9hZmGj8NQMBFU5R4Z5623yMItzq53QV+YsfQMYIDDTCC
// SIG // AwkCAQEwgZMwfDELMAkGA1UEBhMCVVMxEzARBgNVBAgT
// SIG // Cldhc2hpbmd0b24xEDAOBgNVBAcTB1JlZG1vbmQxHjAc
// SIG // BgNVBAoTFU1pY3Jvc29mdCBDb3Jwb3JhdGlvbjEmMCQG
// SIG // A1UEAxMdTWljcm9zb2Z0IFRpbWUtU3RhbXAgUENBIDIw
// SIG // MTACEzMAAAFi0P4C8wHlzUkAAAAAAWIwDQYJYIZIAWUD
// SIG // BAIBBQCgggFKMBoGCSqGSIb3DQEJAzENBgsqhkiG9w0B
// SIG // CRABBDAvBgkqhkiG9w0BCQQxIgQgIlQyIE1BteY7q4rY
// SIG // YjbJJZiiS2eKDwspY8PBU2NB+J4wgfoGCyqGSIb3DQEJ
// SIG // EAIvMYHqMIHnMIHkMIG9BCCKqhiV+zwNDrpU7DRB7Mi5
// SIG // 7xi6GBNYsGjgZqq2qVMKMjCBmDCBgKR+MHwxCzAJBgNV
// SIG // BAYTAlVTMRMwEQYDVQQIEwpXYXNoaW5ndG9uMRAwDgYD
// SIG // VQQHEwdSZWRtb25kMR4wHAYDVQQKExVNaWNyb3NvZnQg
// SIG // Q29ycG9yYXRpb24xJjAkBgNVBAMTHU1pY3Jvc29mdCBU
// SIG // aW1lLVN0YW1wIFBDQSAyMDEwAhMzAAABYtD+AvMB5c1J
// SIG // AAAAAAFiMCIEINl3UD9WzyhK4EACH9RcAHKrGrFB0AZT
// SIG // djwchP9kjvZJMA0GCSqGSIb3DQEBCwUABIIBACoPV7hf
// SIG // Ivm5Mx09SsZpDGVen+yGjhPkKoLpSYgXrrQtIKCFXnBG
// SIG // 00gMpiflEetBtFij52PkpsL2NNRNL7Tja3yWSE/9WMZr
// SIG // gl4p0Rw9q7ufTmp99/NQ4URtzZLx9NfYh4RImGW51JRA
// SIG // 2fOKUKZNzj7v2YZmLa8iY6wiwz/9SxXKRB+EKBossCyT
// SIG // 6CvWJcsvMll6nJaf/G2NC9ev/AHqTQDpnEtQBCR0xNqL
// SIG // guQXJj+dIRlha1P9Y2F16l5NmJmLrgasnLPZrpvt8hvN
// SIG // AOcEsJ9jge5RyQaAv8rzjdTlVGAFCJQkmWpTSQhmi5Rf
// SIG // iMd7ssiPPVibBth+Gb7SwwxZbZ4=
// SIG // End signature block
