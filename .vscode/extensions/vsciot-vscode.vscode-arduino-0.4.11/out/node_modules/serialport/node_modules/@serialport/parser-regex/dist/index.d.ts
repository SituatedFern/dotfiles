/// <reference types="node" />
import { Transform, TransformCallback, TransformOptions } from 'stream';
export interface RegexParserOptions extends TransformOptions {
    regex: RegExp | string | Buffer;
}
/**
 * A transform stream that uses a regular expression to split the incoming text upon.
 *
 * To use the `Regex` parser provide a regular expression to split the incoming text upon. Data is emitted as string controllable by the `encoding` option (defaults to `utf8`).
 *
 * @example
const SerialPort = require('serialport')
const Regex = require('@serialport/parser-regex')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new Regex({ regex: /[\r\n]+/ }))
parser.on('data', console.log)
 */
export declare class RegexParser extends Transform {
    regex: RegExp;
    data: string;
    constructor({ regex, ...options }: RegexParserOptions);
    _transform(chunk: string, encoding: BufferEncoding, cb: TransformCallback): void;
    _flush(cb: TransformCallback): void;
}
