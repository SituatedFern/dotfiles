/// <reference types="node" />
import { Transform, TransformCallback, TransformOptions } from 'stream';
export interface ReadyParserOptions extends TransformOptions {
    delimiter: string | Buffer | number[];
}
/**
 * A transform stream that waits for a sequence of "ready" bytes before emitting a ready event and emitting data events
 *
 * To use the `Ready` parser provide a byte start sequence. After the bytes have been received a ready event is fired and data events are passed through.
 * @example
const SerialPort = require('serialport')
const { ReadyParser } = require('@serialport/parser-ready')
const port = new SerialPort('/dev/tty-usbserial1')
const parser = port.pipe(new ReadyParser({ delimiter: 'READY' }))
parser.on('ready', () => console.log('the ready byte sequence has been received'))
parser.on('data', console.log) // all data after READY is received
 */
export declare class ReadyParser extends Transform {
    delimiter: Buffer;
    readOffset: number;
    ready: boolean;
    constructor({ delimiter, ...options }: ReadyParserOptions);
    _transform(chunk: Buffer, encoding: BufferEncoding, cb: TransformCallback): void;
}
