(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (bruh :label "")
    (sidestuff)
    ))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (info :label "îœ’")
    (cpu :label "ï¡š")
    (mem :label "ïˆ³")
    (hdd :label "ïŸ‰")
    (upt :label "ï‚ª")
    (updates :label "ïƒ³")
    (clock :label "ï—¯")
    ))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 5
    (bruh :label "îž¨")
    (button :onclick "wmctrl -s 0" 1)
    (button :onclick "wmctrl -s 1" 2)
    (button :onclick "wmctrl -s 2" 3)
    (button :onclick "wmctrl -s 3" 4)
    (button :onclick "wmctrl -s 4" 5)
    (button :onclick "wmctrl -s 5" 6)
    (button :onclick "wmctrl -s 6" 7)
    (button :onclick "wmctrl -s 7" 8)
    (button :onclick "wmctrl -s 8" 9)))

(defwidget bruh [label]
  (box :orientation "h"
       :class "icon placeholder"
       :space-evenly false
    (box :class "label placeholder" label)))

(defwidget info [label]
  (box :orientation "h"
       :class "icon penguin"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" kernel)))

(defwidget cpu [label]
  (box :orientation "h"
       :class "icon cpu"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" "cpu: ${round(EWW_CPU.avg, 0)}%")
    ))

(defwidget mem [label]
  (box :orientation "h"
       :class "icon mem"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" "mem: ${round((EWW_RAM.used_mem) * 0.001, 0)}M (${round(EWW_RAM.used_mem_perc, 0)}%)")
    ))

(defwidget upt [label]
  (box :orientation "h"
       :class "icon upt"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" "uptime: ${uptime}")
    ))

(defwidget updates [label]
  (box :orientation "h"
       :class "icon updates"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" "${updates} updates")
    ))

(defwidget hdd [label]
  (box :orientation "h"
       :class "icon hdd"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" "hdd: ${round(EWW_DISK["/"].free * 0.000000001, 0)}G free")
    ))

(defwidget clock [label]
  (box :orientation "h"
       :class "icon penguin"
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" time)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))


(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric icon"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%b %d %Y - (%H:%M)'")

(defpoll uptime :interval "5m"
  `uptime --pretty | sed -e 's/up //g' -e 's/ days/d/g' -e 's/ day/d/g' -e 's/ hours/h/g' -e 's/ hour/h/g' -e 's/ minutes/m/g' -e 's/, / /g'`)

(defpoll kernel :interval "30m"
  `uname -r`)

(defpoll updates :interval "10m"
  `checkupdates | wc -l`)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "1%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
