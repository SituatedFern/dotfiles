(defwidget bar []
  (centerbox :orientation "h"
    (workspaces)
    (bruh :label "")
    (sidestuff)
    ))

(defwidget sidestuff []
  (box :class "sidestuff" :orientation "h" :space-evenly false :halign "end"
    (info :label "îœ’" :class "icon penguin" :value kernel)
    (info :label "ï¡š" :class "icon cpu" :value "cpu: ${round(EWW_CPU.avg, 0)}%")
    (info :label "ïˆ³" :class "icon mem" :value "mem: ${round((EWW_RAM.used_mem) * 0.001, 0)}M (${round(EWW_RAM.used_mem_perc, 0)}%)")
    (info :label "ïŸ‰" :class "icon hdd" :value "hdd: ${round(EWW_DISK["/"].free * 0.000000001, 0)}G free")
    (info :label "ï‚ª" :class "icon upt" :value "uptime: ${uptime}")
    (info :label "ïƒ³" :class "icon updates" :value "${updates} updates")
    (info :label "ï—¯" :class "icon penguin" :value time)
    ))

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"
       :spacing 5
    (bruh :label "îž¨")
    (button :class {desktop == 0 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 0'" 1)
    (button :class {desktop == 1 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 1'" 2)
    (button :class {desktop == 2 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 2'" 3)
    (button :class {desktop == 3 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 3'" 4)
    (button :class {desktop == 4 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 4'" 5)
    (button :class {desktop == 5 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 5'" 6)
    (button :class {desktop == 6 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 6'" 7)
    (button :class {desktop == 7 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 7'" 8)
    (button :class {desktop == 8 ? "active" : "inactive"} :onclick "leftwm-command 'SendWorkspaceToTag 0 8'" 9)))

(defwidget bruh [label]
  (box :orientation "h"
       :class "icon placeholder"
       :space-evenly false
    (box :class "label placeholder" label)))

(defwidget info [label class value]
  (box :orientation "h"
       :class class
       :space-evenly false
    (box :class "label" label)
    (box :class "kernel" value)))

(defwidget music []
  (box :class "music"
       :orientation "h"
       :space-evenly false
       :halign "center"
    {music != "" ? "ðŸŽµ${music}" : ""}))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric icon"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(deflisten music :initial ""
  "playerctl --follow metadata --format '{{ artist }} - {{ title }}' || true")

(defpoll desktop :interval "100ms"
  `xdotool get_desktop`)

(defpoll volume :interval "1s"
  "scripts/getvol")

(defpoll time :interval "10s"
  "date '+%b %d %Y - (%H:%M)'")

(defpoll uptime :interval "5m"
  `uptime --pretty | sed -e 's/up //g' -e 's/ days/d/g' -e 's/ day/d/g' -e 's/ hours/h/g' -e 's/ hour/h/g' -e 's/ minutes/m/g' -e 's/, / /g'`)

(defpoll kernel :interval "30m"
  `uname -r`)

(defpoll updates :interval "10m"
  `checkupdates | wc -l`)

(defwindow bar
  :monitor 0
  :windowtype "dock"
  :geometry (geometry :x "0%"
                      :y "1%"
                      :width "99%"
                      :height "10px"
                      :anchor "top center")
  :reserve (struts :side "top" :distance "4%")
  (bar))
